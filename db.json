{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-animastars/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/bird_32_gray.png","path":"css/images/bird_32_gray.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/bird_32_gray_fail.png","path":"css/images/bird_32_gray_fail.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/code_bg.png","path":"css/images/code_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/dotted-border.png","path":"css/images/dotted-border.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/email.png","path":"css/images/email.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/line-tile.png","path":"css/images/line-tile.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/newplanet-2.jpg","path":"css/images/newplanet-2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/noise.png","path":"css/images/noise.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/rss.png","path":"css/images/rss.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/search.png","path":"css/images/search.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/stars.gif","path":"css/images/stars.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/stars2.gif","path":"css/images/stars2.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-animastars/source/css/images/newplanet.png","path":"css/images/newplanet.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1494838141000},{"_id":"themes/hexo-theme-animastars/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/README.md","hash":"85c193a9070a65daad5ed671a64d5547f5f7dc58","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/_config.yml","hash":"45e2e0541876c38456f60eac95110006d533cb25","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1494928508000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1494837864000},{"_id":"source/_posts/App中如何实现快速实现打电话，发短信功能.md","hash":"ee3ba857f18b13bc0072c115af8be9e711d3889d","modified":1494928508000},{"_id":"source/_posts/Mac搭建Hexo免费博客（一).md","hash":"6dc2521d6eb460fce9915b9e6f5e7cc17d1a38a5","modified":1494928508000},{"_id":"source/_posts/Mac搭建Hexo免费博客（三）.md","hash":"dfb054bba51c21d0e9d44bdb68e0c1e6d3695456","modified":1494928508000},{"_id":"source/_posts/一款快速上传项目到git及建立私有Pod源的脚本.md","hash":"5696d881a59c0a876256e0cff6d76575cd27d0a2","modified":1494928604000},{"_id":"source/_posts/Mac搭建Hexo免费博客（二）.md","hash":"b6eee30e5430f4e47ad4fcb78a37bfc876bc9a61","modified":1494928508000},{"_id":"source/_posts/浅析OC中drawRect.md","hash":"f3056f06f95949ce1c276a73a39be2e6d6616ccf","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_widget/archive.ejs","hash":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_widget/category.ejs","hash":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_widget/recent_posts.ejs","hash":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_widget/tag.ejs","hash":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_widget/tagcloud.ejs","hash":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/archive.ejs","hash":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/article.ejs","hash":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/footer.ejs","hash":"cbc76c11fbbf432f6a846096c14f752212a51b60","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/head.ejs","hash":"b91ec56bceced5101d6c17d45d6206ae0ea5fe34","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/header.ejs","hash":"e04bba51c340126455e0cb246f4d0fb269ffa5eb","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_extend.styl","hash":"b70db5ef0df14463794a4d16d57e4f34d8009bfb","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_variables.styl","hash":"c73ca9bf2177666fd49f6fdecae784b760e9a2d5","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/style.styl","hash":"004aafdef638be566766f22e0fcce81e06b367fd","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/post/gallery.ejs","hash":"87230d1283207a5dd850ac77130ee87c7d22d6ef","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/post/nav.ejs","hash":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/archive.styl","hash":"7c669deae81f8e1af23ccac66c8846637e91af33","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/article.styl","hash":"180e545d3b184de8be865d08dba7ae61e3e6d6c8","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/comment.styl","hash":"c35bab6ae3592c42621a91443291a4b03a163fca","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/footer.styl","hash":"ad491b47f2c9659cd1ff0762899cbc17cd0273df","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/header.styl","hash":"db8bf7669c429a25e25af72a5ed2bdef95281387","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/highlight.styl","hash":"dc20a20238c943e41c1d04cf4a0eee201e18725f","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/highlight.styl.bak","hash":"35edc542cc974e01cbd374b42b098537a3990704","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/sidebar-aside.styl","hash":"ca9bcf090c3c88db90ade1dad89f72264f488b6f","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/_partial/sidebar.styl","hash":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/bird_32_gray.png","hash":"55345ff7370047a6b825dd235c9ce201545a0952","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/bird_32_gray_fail.png","hash":"0c30b159e4cbb7e8a1ad826be537fc4bd79b0a8f","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/code_bg.png","hash":"c34acd76f73ef68d62c031856bd627ffac9378f3","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/dotted-border.png","hash":"347784b401d0d38acf5e3b6d06a90346a16a8e8c","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/email.png","hash":"2a5d251567fabcad68fa596ebaf1508296524930","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/line-tile.png","hash":"a86a5d70fb0024dd295b85ea9058b43c1c5f25d3","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/newplanet-2.jpg","hash":"ac1a6d96de3a2cc7a824764eaab13bf9b031ba27","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/noise.png","hash":"a839ae391fbbb0a1a2b22f8aba1d8ae2a702ef34","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/rss.png","hash":"d61fc1ccc66f081002b15532f66e054147d5f2fb","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/search.png","hash":"3c0178651f38bff462d4feb927e4f4df87b0f9d0","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/stars.gif","hash":"d6fe4e7a98f3c329e120155d0f1de17b5fb9469b","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/stars2.gif","hash":"47fbfb668ae69ca1e0fb5e7d2ede9757973644d2","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1494928508000},{"_id":"themes/hexo-theme-animastars/source/css/images/newplanet.png","hash":"4401ba3f685d32b4fa3dab73c63c51fa2e723139","modified":1494928508000},{"_id":"public/baidusitemap.xml","hash":"71767a5240cdffb22255a8d521f6d7cb6c8fd025","modified":1494928615388},{"_id":"public/atom.xml","hash":"5313717f7ea365f69470d31b1e7b0e68b947029e","modified":1494928615737},{"_id":"public/sitemap.xml","hash":"90db52b7ae85752541a832f63fec22bfe7692701","modified":1494928615761},{"_id":"public/2014/05/30/Mac搭建Hexo免费博客（三）/index.html","hash":"7f0687fc5cff12388fb957079d18a0823d11cc2f","modified":1494928615787},{"_id":"public/archives/index.html","hash":"e831aa4735707453ea562a5e9c14504dd3052621","modified":1494928615857},{"_id":"public/archives/2014/index.html","hash":"77385f7c61f67af2826064f4947272da8b0b1682","modified":1494928615858},{"_id":"public/archives/2014/05/index.html","hash":"98f720089f8dbe5bde1053148de97f0790f7d211","modified":1494928615858},{"_id":"public/archives/2014/08/index.html","hash":"44eded9a3ac1f56956a5d51ce27775328f0e4c04","modified":1494928615858},{"_id":"public/archives/2014/10/index.html","hash":"92ae2a396499abecc25912ed32f81a05139f742d","modified":1494928615858},{"_id":"public/tags/Blog/index.html","hash":"495495b8fa10430e36acb30faed7de57e4008662","modified":1494928615858},{"_id":"public/2014/10/12/App中如何实现快速实现打电话，发短信功能/index.html","hash":"b2859c0ecf43f2951592d416e697f832b0d9b4d4","modified":1494928615858},{"_id":"public/2014/08/21/浅析OC中drawRect/index.html","hash":"6523c53d392f7cec1623de4a2a7e92c418527c79","modified":1494928615858},{"_id":"public/2014/05/25/Mac搭建Hexo免费博客（二）/index.html","hash":"f0c276dece0c82b105ba3d21c9e0ff8e58f03f29","modified":1494928615858},{"_id":"public/2014/05/21/Mac搭建Hexo免费博客（一)/index.html","hash":"6e9681d932ec15b8deae69a49b4f18978c7ca734","modified":1494928615858},{"_id":"public/index.html","hash":"8ff216aac1a9460d0fe792d8abee6873602a151e","modified":1494928615858},{"_id":"public/2014/11/28/一款快速上传项目到git及建立私有Pod源的脚本/index.html","hash":"ee8639080d09da0d771db9de99f662830d0e49e5","modified":1494928615870},{"_id":"public/archives/2014/11/index.html","hash":"1a9f8b4b46bafb01e82cda9b2bd03eacb3ad8738","modified":1494928615870},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494928615901},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494928615901},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494928615901},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494928615901},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494928615901},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494928615901},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1494928615901},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1494928615903},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1494928615903},{"_id":"public/css/images/bird_32_gray.png","hash":"55345ff7370047a6b825dd235c9ce201545a0952","modified":1494928615903},{"_id":"public/css/images/bird_32_gray_fail.png","hash":"0c30b159e4cbb7e8a1ad826be537fc4bd79b0a8f","modified":1494928615903},{"_id":"public/css/images/code_bg.png","hash":"c34acd76f73ef68d62c031856bd627ffac9378f3","modified":1494928615903},{"_id":"public/css/images/dotted-border.png","hash":"347784b401d0d38acf5e3b6d06a90346a16a8e8c","modified":1494928615903},{"_id":"public/css/images/email.png","hash":"2a5d251567fabcad68fa596ebaf1508296524930","modified":1494928615903},{"_id":"public/css/images/line-tile.png","hash":"a86a5d70fb0024dd295b85ea9058b43c1c5f25d3","modified":1494928615903},{"_id":"public/css/images/newplanet-2.jpg","hash":"ac1a6d96de3a2cc7a824764eaab13bf9b031ba27","modified":1494928615903},{"_id":"public/css/images/noise.png","hash":"a839ae391fbbb0a1a2b22f8aba1d8ae2a702ef34","modified":1494928615903},{"_id":"public/css/images/rss.png","hash":"d61fc1ccc66f081002b15532f66e054147d5f2fb","modified":1494928615904},{"_id":"public/css/images/search.png","hash":"3c0178651f38bff462d4feb927e4f4df87b0f9d0","modified":1494928615904},{"_id":"public/css/images/stars.gif","hash":"d6fe4e7a98f3c329e120155d0f1de17b5fb9469b","modified":1494928615904},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494928615904},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1494928617693},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494928617718},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1494928617718},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494928617719},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494928617719},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494928617719},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494928617719},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494928617719},{"_id":"public/css/style.css","hash":"731ac1439e540c34c7b720f76b193bf53e253b13","modified":1494928617719},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494928617720},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494928617720},{"_id":"public/css/images/stars2.gif","hash":"47fbfb668ae69ca1e0fb5e7d2ede9757973644d2","modified":1494928617720},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1494928617723},{"_id":"public/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1494928617723},{"_id":"public/css/images/newplanet.png","hash":"4401ba3f685d32b4fa3dab73c63c51fa2e723139","modified":1494928617723}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"App中如何实现快速实现打电话，发短信功能","date":"2014-10-12T08:33:51.000Z","comments":1,"_content":"\n### 前言\n在开发App中，经常会使用到点击拨打用户电话功能，短信功能可能会比较少见，其实在iOS中提供了接口，让我们调用。下面就让我们快速的了解这两个功能。\n\n####  1.打电话功能\n\n\n- 第一种是用UIWebView加载电话，这种是合法的，可以上App Store的。在实际开发中，本人一直使用此方法。 代码如下：\n\n```\nUIWebView*callWebview =[[UIWebView alloc] init];  \n\tNSURL *telURL =[NSURL URLWithString:@\"tel:10010\"];  \n\t[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];  \n\t//记得添加到view上  \n\t[self.view addSubview:callWebview];  \n```\n\n- 第二种是私有方法，网上查资料说是不能上App Store的（自己没试过）。\n\n```\n\t[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"telprompt://10010\"]];  \n```\n\n####  2.短信功能\n\n- 第一种最简单是使用openURL：\n\n```\n\t[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@\"sms://10010\"]];//发短信\n```\n此方法虽然方便，但是上面无法指定短信内容，iOS4.0新加入了MFMessageComposeViewController和MFMessageComposeViewControllerDelegate，提供了发送短信的接口,可以像发送邮件那样不用跳出程序来发送短信.\n\n\n- 第二种MFMessageComposeViewController：\nMFMessageComposeViewController提供了操作界面使用前必须检查canSendText方法,若返回NO则不应将这个controller展现出来,而应该提示用户不支持发送短信功能. messageComposeDelegate ：代理，处理发送结果 recipients ：收信人<列表，支持群发> body ：短信内容\nFrameworks中要引入MessageUI.framework\n\n```\n#import <MessageUI/MessageUI.h>\n\t添加协议：<MFMessageComposeViewControllerDelegate>\n\t\n\t#import <MessageUI/MessageUI.h>   \n\t@interface DemoViewController : UIViewController <MFMessageComposeViewControllerDelegate>  \n\t  \n\t@end \n```\n同时实现协议MFMessageComposeViewControllerDelegate\n\n```\n- (void)showMessageView  \n\t{  \n      \n    if( [MFMessageComposeViewController canSendText] ){  \n          \n        MFMessageComposeViewController * controller = [[MFMessageComposeViewController alloc]init]; //autorelease];  \n          \n        controller.recipients = [NSArray arrayWithObject:@\"10010\"];       \n        controller.body = @\"测试发短信\";          \n        controller.messageComposeDelegate = self;  \n  \n        [self presentModalViewController:controller animated:YES];  \n          \n        [[[[controller viewControllers] lastObject] navigationItem] setTitle:@\"测试短信\"];//修改短信界面标题  \n    }else{  \n          \n        [self alertWithTitle:@\"提示信息\" msg:@\"设备没有短信功能\"];          \n\t }      \n\t}\n\t\n\t\n\t//MFMessageComposeViewControllerDelegate  \n- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result{  \n\t    [controller dismissModalViewControllerAnimated:NO];//关键的一句   不能为YES  \n      \n\t    switch ( result ) {  \n              \n        case MessageComposeResultCancelled:  \n  \n            [self alertWithTitle:@\"提示信息\" msg:@\"发送取消\"];   \n            break;  \n        case MessageComposeResultFailed:// send failed  \n            [self alertWithTitle:@\"提示信息\" msg:@\"发送成功\"];   \n            break;  \n        case MessageComposeResultSent:  \n            [self alertWithTitle:@\"提示信息\" msg:@\"发送失败\"];   \n            break;  \n        default:  \n            break;   \n\t    }  \n\t  }  \n        \n- (void) alertWithTitle:(NSString *)title msg:(NSString *)msg {  \n\t    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title  \n\t           message:msg  \n\t           delegate:self  \n\t           cancelButtonTitle:nil  \n\t           otherButtonTitles:@\"确定\", nil];  \n\t\t\t[alert show];  \n\t\t}  \n    }\n```\n\n\n","source":"_posts/App中如何实现快速实现打电话，发短信功能.md","raw":"---\nlayout : post\ntitle: App中如何实现快速实现打电话，发短信功能\ndate: 2014-10-12 16:33:51\ntags: Blog\ncomments: true\n---\n\n### 前言\n在开发App中，经常会使用到点击拨打用户电话功能，短信功能可能会比较少见，其实在iOS中提供了接口，让我们调用。下面就让我们快速的了解这两个功能。\n\n####  1.打电话功能\n\n\n- 第一种是用UIWebView加载电话，这种是合法的，可以上App Store的。在实际开发中，本人一直使用此方法。 代码如下：\n\n```\nUIWebView*callWebview =[[UIWebView alloc] init];  \n\tNSURL *telURL =[NSURL URLWithString:@\"tel:10010\"];  \n\t[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];  \n\t//记得添加到view上  \n\t[self.view addSubview:callWebview];  \n```\n\n- 第二种是私有方法，网上查资料说是不能上App Store的（自己没试过）。\n\n```\n\t[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"telprompt://10010\"]];  \n```\n\n####  2.短信功能\n\n- 第一种最简单是使用openURL：\n\n```\n\t[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@\"sms://10010\"]];//发短信\n```\n此方法虽然方便，但是上面无法指定短信内容，iOS4.0新加入了MFMessageComposeViewController和MFMessageComposeViewControllerDelegate，提供了发送短信的接口,可以像发送邮件那样不用跳出程序来发送短信.\n\n\n- 第二种MFMessageComposeViewController：\nMFMessageComposeViewController提供了操作界面使用前必须检查canSendText方法,若返回NO则不应将这个controller展现出来,而应该提示用户不支持发送短信功能. messageComposeDelegate ：代理，处理发送结果 recipients ：收信人<列表，支持群发> body ：短信内容\nFrameworks中要引入MessageUI.framework\n\n```\n#import <MessageUI/MessageUI.h>\n\t添加协议：<MFMessageComposeViewControllerDelegate>\n\t\n\t#import <MessageUI/MessageUI.h>   \n\t@interface DemoViewController : UIViewController <MFMessageComposeViewControllerDelegate>  \n\t  \n\t@end \n```\n同时实现协议MFMessageComposeViewControllerDelegate\n\n```\n- (void)showMessageView  \n\t{  \n      \n    if( [MFMessageComposeViewController canSendText] ){  \n          \n        MFMessageComposeViewController * controller = [[MFMessageComposeViewController alloc]init]; //autorelease];  \n          \n        controller.recipients = [NSArray arrayWithObject:@\"10010\"];       \n        controller.body = @\"测试发短信\";          \n        controller.messageComposeDelegate = self;  \n  \n        [self presentModalViewController:controller animated:YES];  \n          \n        [[[[controller viewControllers] lastObject] navigationItem] setTitle:@\"测试短信\"];//修改短信界面标题  \n    }else{  \n          \n        [self alertWithTitle:@\"提示信息\" msg:@\"设备没有短信功能\"];          \n\t }      \n\t}\n\t\n\t\n\t//MFMessageComposeViewControllerDelegate  \n- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result{  \n\t    [controller dismissModalViewControllerAnimated:NO];//关键的一句   不能为YES  \n      \n\t    switch ( result ) {  \n              \n        case MessageComposeResultCancelled:  \n  \n            [self alertWithTitle:@\"提示信息\" msg:@\"发送取消\"];   \n            break;  \n        case MessageComposeResultFailed:// send failed  \n            [self alertWithTitle:@\"提示信息\" msg:@\"发送成功\"];   \n            break;  \n        case MessageComposeResultSent:  \n            [self alertWithTitle:@\"提示信息\" msg:@\"发送失败\"];   \n            break;  \n        default:  \n            break;   \n\t    }  \n\t  }  \n        \n- (void) alertWithTitle:(NSString *)title msg:(NSString *)msg {  \n\t    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title  \n\t           message:msg  \n\t           delegate:self  \n\t           cancelButtonTitle:nil  \n\t           otherButtonTitles:@\"确定\", nil];  \n\t\t\t[alert show];  \n\t\t}  \n    }\n```\n\n\n","slug":"App中如何实现快速实现打电话，发短信功能","published":1,"updated":"2017-05-16T09:55:08.000Z","photos":[],"link":"","_id":"cj2rdwczu00000io6y7s2s8lz","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在开发App中，经常会使用到点击拨打用户电话功能，短信功能可能会比较少见，其实在iOS中提供了接口，让我们调用。下面就让我们快速的了解这两个功能。</p>\n<h4 id=\"1-打电话功能\"><a href=\"#1-打电话功能\" class=\"headerlink\" title=\"1.打电话功能\"></a>1.打电话功能</h4><ul>\n<li>第一种是用UIWebView加载电话，这种是合法的，可以上App Store的。在实际开发中，本人一直使用此方法。 代码如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIWebView*callWebview =[[UIWebView alloc] init];  </div><div class=\"line\">\tNSURL *telURL =[NSURL URLWithString:@&quot;tel:10010&quot;];  </div><div class=\"line\">\t[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];  </div><div class=\"line\">\t//记得添加到view上  </div><div class=\"line\">\t[self.view addSubview:callWebview];</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种是私有方法，网上查资料说是不能上App Store的（自己没试过）。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;telprompt://10010&quot;]];</div></pre></td></tr></table></figure>\n<h4 id=\"2-短信功能\"><a href=\"#2-短信功能\" class=\"headerlink\" title=\"2.短信功能\"></a>2.短信功能</h4><ul>\n<li>第一种最简单是使用openURL：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@&quot;sms://10010&quot;]];//发短信</div></pre></td></tr></table></figure>\n<p>此方法虽然方便，但是上面无法指定短信内容，iOS4.0新加入了MFMessageComposeViewController和MFMessageComposeViewControllerDelegate，提供了发送短信的接口,可以像发送邮件那样不用跳出程序来发送短信.</p>\n<ul>\n<li>第二种MFMessageComposeViewController：<br>MFMessageComposeViewController提供了操作界面使用前必须检查canSendText方法,若返回NO则不应将这个controller展现出来,而应该提示用户不支持发送短信功能. messageComposeDelegate ：代理，处理发送结果 recipients ：收信人&lt;列表，支持群发&gt; body ：短信内容<br>Frameworks中要引入MessageUI.framework</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;MessageUI/MessageUI.h&gt;</div><div class=\"line\">\t添加协议：&lt;MFMessageComposeViewControllerDelegate&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t#import &lt;MessageUI/MessageUI.h&gt;   </div><div class=\"line\">\t@interface DemoViewController : UIViewController &lt;MFMessageComposeViewControllerDelegate&gt;  </div><div class=\"line\">\t  </div><div class=\"line\">\t@end</div></pre></td></tr></table></figure>\n<p>同时实现协议MFMessageComposeViewControllerDelegate</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)showMessageView  </div><div class=\"line\">\t&#123;  </div><div class=\"line\">      </div><div class=\"line\">    if( [MFMessageComposeViewController canSendText] )&#123;  </div><div class=\"line\">          </div><div class=\"line\">        MFMessageComposeViewController * controller = [[MFMessageComposeViewController alloc]init]; //autorelease];  </div><div class=\"line\">          </div><div class=\"line\">        controller.recipients = [NSArray arrayWithObject:@&quot;10010&quot;];       </div><div class=\"line\">        controller.body = @&quot;测试发短信&quot;;          </div><div class=\"line\">        controller.messageComposeDelegate = self;  </div><div class=\"line\">  </div><div class=\"line\">        [self presentModalViewController:controller animated:YES];  </div><div class=\"line\">          </div><div class=\"line\">        [[[[controller viewControllers] lastObject] navigationItem] setTitle:@&quot;测试短信&quot;];//修改短信界面标题  </div><div class=\"line\">    &#125;else&#123;  </div><div class=\"line\">          </div><div class=\"line\">        [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;设备没有短信功能&quot;];          </div><div class=\"line\">\t &#125;      </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t//MFMessageComposeViewControllerDelegate  </div><div class=\"line\">- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result&#123;  </div><div class=\"line\">\t    [controller dismissModalViewControllerAnimated:NO];//关键的一句   不能为YES  </div><div class=\"line\">      </div><div class=\"line\">\t    switch ( result ) &#123;  </div><div class=\"line\">              </div><div class=\"line\">        case MessageComposeResultCancelled:  </div><div class=\"line\">  </div><div class=\"line\">            [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;发送取消&quot;];   </div><div class=\"line\">            break;  </div><div class=\"line\">        case MessageComposeResultFailed:// send failed  </div><div class=\"line\">            [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;发送成功&quot;];   </div><div class=\"line\">            break;  </div><div class=\"line\">        case MessageComposeResultSent:  </div><div class=\"line\">            [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;发送失败&quot;];   </div><div class=\"line\">            break;  </div><div class=\"line\">        default:  </div><div class=\"line\">            break;   </div><div class=\"line\">\t    &#125;  </div><div class=\"line\">\t  &#125;  </div><div class=\"line\">        </div><div class=\"line\">- (void) alertWithTitle:(NSString *)title msg:(NSString *)msg &#123;  </div><div class=\"line\">\t    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title  </div><div class=\"line\">\t           message:msg  </div><div class=\"line\">\t           delegate:self  </div><div class=\"line\">\t           cancelButtonTitle:nil  </div><div class=\"line\">\t           otherButtonTitles:@&quot;确定&quot;, nil];  </div><div class=\"line\">\t\t\t[alert show];  </div><div class=\"line\">\t\t&#125;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在开发App中，经常会使用到点击拨打用户电话功能，短信功能可能会比较少见，其实在iOS中提供了接口，让我们调用。下面就让我们快速的了解这两个功能。</p>\n<h4 id=\"1-打电话功能\"><a href=\"#1-打电话功能\" class=\"headerlink\" title=\"1.打电话功能\"></a>1.打电话功能</h4><ul>\n<li>第一种是用UIWebView加载电话，这种是合法的，可以上App Store的。在实际开发中，本人一直使用此方法。 代码如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIWebView*callWebview =[[UIWebView alloc] init];  </div><div class=\"line\">\tNSURL *telURL =[NSURL URLWithString:@&quot;tel:10010&quot;];  </div><div class=\"line\">\t[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];  </div><div class=\"line\">\t//记得添加到view上  </div><div class=\"line\">\t[self.view addSubview:callWebview];</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种是私有方法，网上查资料说是不能上App Store的（自己没试过）。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;telprompt://10010&quot;]];</div></pre></td></tr></table></figure>\n<h4 id=\"2-短信功能\"><a href=\"#2-短信功能\" class=\"headerlink\" title=\"2.短信功能\"></a>2.短信功能</h4><ul>\n<li>第一种最简单是使用openURL：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@&quot;sms://10010&quot;]];//发短信</div></pre></td></tr></table></figure>\n<p>此方法虽然方便，但是上面无法指定短信内容，iOS4.0新加入了MFMessageComposeViewController和MFMessageComposeViewControllerDelegate，提供了发送短信的接口,可以像发送邮件那样不用跳出程序来发送短信.</p>\n<ul>\n<li>第二种MFMessageComposeViewController：<br>MFMessageComposeViewController提供了操作界面使用前必须检查canSendText方法,若返回NO则不应将这个controller展现出来,而应该提示用户不支持发送短信功能. messageComposeDelegate ：代理，处理发送结果 recipients ：收信人&lt;列表，支持群发&gt; body ：短信内容<br>Frameworks中要引入MessageUI.framework</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;MessageUI/MessageUI.h&gt;</div><div class=\"line\">\t添加协议：&lt;MFMessageComposeViewControllerDelegate&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t#import &lt;MessageUI/MessageUI.h&gt;   </div><div class=\"line\">\t@interface DemoViewController : UIViewController &lt;MFMessageComposeViewControllerDelegate&gt;  </div><div class=\"line\">\t  </div><div class=\"line\">\t@end</div></pre></td></tr></table></figure>\n<p>同时实现协议MFMessageComposeViewControllerDelegate</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)showMessageView  </div><div class=\"line\">\t&#123;  </div><div class=\"line\">      </div><div class=\"line\">    if( [MFMessageComposeViewController canSendText] )&#123;  </div><div class=\"line\">          </div><div class=\"line\">        MFMessageComposeViewController * controller = [[MFMessageComposeViewController alloc]init]; //autorelease];  </div><div class=\"line\">          </div><div class=\"line\">        controller.recipients = [NSArray arrayWithObject:@&quot;10010&quot;];       </div><div class=\"line\">        controller.body = @&quot;测试发短信&quot;;          </div><div class=\"line\">        controller.messageComposeDelegate = self;  </div><div class=\"line\">  </div><div class=\"line\">        [self presentModalViewController:controller animated:YES];  </div><div class=\"line\">          </div><div class=\"line\">        [[[[controller viewControllers] lastObject] navigationItem] setTitle:@&quot;测试短信&quot;];//修改短信界面标题  </div><div class=\"line\">    &#125;else&#123;  </div><div class=\"line\">          </div><div class=\"line\">        [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;设备没有短信功能&quot;];          </div><div class=\"line\">\t &#125;      </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t//MFMessageComposeViewControllerDelegate  </div><div class=\"line\">- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result&#123;  </div><div class=\"line\">\t    [controller dismissModalViewControllerAnimated:NO];//关键的一句   不能为YES  </div><div class=\"line\">      </div><div class=\"line\">\t    switch ( result ) &#123;  </div><div class=\"line\">              </div><div class=\"line\">        case MessageComposeResultCancelled:  </div><div class=\"line\">  </div><div class=\"line\">            [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;发送取消&quot;];   </div><div class=\"line\">            break;  </div><div class=\"line\">        case MessageComposeResultFailed:// send failed  </div><div class=\"line\">            [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;发送成功&quot;];   </div><div class=\"line\">            break;  </div><div class=\"line\">        case MessageComposeResultSent:  </div><div class=\"line\">            [self alertWithTitle:@&quot;提示信息&quot; msg:@&quot;发送失败&quot;];   </div><div class=\"line\">            break;  </div><div class=\"line\">        default:  </div><div class=\"line\">            break;   </div><div class=\"line\">\t    &#125;  </div><div class=\"line\">\t  &#125;  </div><div class=\"line\">        </div><div class=\"line\">- (void) alertWithTitle:(NSString *)title msg:(NSString *)msg &#123;  </div><div class=\"line\">\t    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title  </div><div class=\"line\">\t           message:msg  </div><div class=\"line\">\t           delegate:self  </div><div class=\"line\">\t           cancelButtonTitle:nil  </div><div class=\"line\">\t           otherButtonTitles:@&quot;确定&quot;, nil];  </div><div class=\"line\">\t\t\t[alert show];  </div><div class=\"line\">\t\t&#125;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Mac搭建Hexo免费博客（三）","date":"2014-05-30T08:53:51.000Z","excerpt":"","comments":1,"_content":"\n## 域名绑定\n\n* 域名解析\n域名购买成功后，在解析设置中添加以下解析\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-03%20%E4%B8%8A%E5%8D%8812.02.04.png)\n\n记录类型为：A\n主机记录分别为“@”，“wwww”。其中设置@，可以用xxx.com进行访问。设置www，可以使用www.xxx.com进行访问。\n记录值都为 “192.30.252.153”\n\n* 添加CNAME文件\n\n打开自己本地的博客目录，在source文件夹下创建名为CNAME的文本文件。打开，输入自己的域名，格式为“xxx.com”，保存后使用\n\n```\nhexo g\nhexo d\n```\n部署到github。\n\n至此，便可使用我们自己的域名进行访问了！\n\n## 图片存储\n\n可以使用[七牛云存储](https://portal.qiniu.com/)\n\n## [Mac上好用的GIF图截屏工具](http://www.cockos.com/licecap/)\n\n\n","source":"_posts/Mac搭建Hexo免费博客（三）.md","raw":"---\nlayout : post\ntitle: Mac搭建Hexo免费博客（三）\ndate: 2014-05-30 16:53:51\ntags: Blog\nexcerpt: \"根据hexo搭建博客-步骤3\"\ncomments: true\n---\n\n## 域名绑定\n\n* 域名解析\n域名购买成功后，在解析设置中添加以下解析\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-03%20%E4%B8%8A%E5%8D%8812.02.04.png)\n\n记录类型为：A\n主机记录分别为“@”，“wwww”。其中设置@，可以用xxx.com进行访问。设置www，可以使用www.xxx.com进行访问。\n记录值都为 “192.30.252.153”\n\n* 添加CNAME文件\n\n打开自己本地的博客目录，在source文件夹下创建名为CNAME的文本文件。打开，输入自己的域名，格式为“xxx.com”，保存后使用\n\n```\nhexo g\nhexo d\n```\n部署到github。\n\n至此，便可使用我们自己的域名进行访问了！\n\n## 图片存储\n\n可以使用[七牛云存储](https://portal.qiniu.com/)\n\n## [Mac上好用的GIF图截屏工具](http://www.cockos.com/licecap/)\n\n\n","slug":"Mac搭建Hexo免费博客（三）","published":1,"updated":"2017-05-16T09:55:08.000Z","photos":[],"link":"","_id":"cj2rdwd0900010io6k3rpyivj","content":"<h2 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h2><ul>\n<li>域名解析<br>域名购买成功后，在解析设置中添加以下解析</li>\n</ul>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-03%20%E4%B8%8A%E5%8D%8812.02.04.png\" alt=\"\"></p>\n<p>记录类型为：A<br>主机记录分别为“@”，“wwww”。其中设置@，可以用xxx.com进行访问。设置www，可以使用www.xxx.com进行访问。<br>记录值都为 “192.30.252.153”</p>\n<ul>\n<li>添加CNAME文件</li>\n</ul>\n<p>打开自己本地的博客目录，在source文件夹下创建名为CNAME的文本文件。打开，输入自己的域名，格式为“xxx.com”，保存后使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>部署到github。</p>\n<p>至此，便可使用我们自己的域名进行访问了！</p>\n<h2 id=\"图片存储\"><a href=\"#图片存储\" class=\"headerlink\" title=\"图片存储\"></a>图片存储</h2><p>可以使用<a href=\"https://portal.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛云存储</a></p>\n<h2 id=\"Mac上好用的GIF图截屏工具\"><a href=\"#Mac上好用的GIF图截屏工具\" class=\"headerlink\" title=\"Mac上好用的GIF图截屏工具\"></a><a href=\"http://www.cockos.com/licecap/\" target=\"_blank\" rel=\"external\">Mac上好用的GIF图截屏工具</a></h2>","site":{"data":{}},"more":"<h2 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h2><ul>\n<li>域名解析<br>域名购买成功后，在解析设置中添加以下解析</li>\n</ul>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-03%20%E4%B8%8A%E5%8D%8812.02.04.png\" alt=\"\"></p>\n<p>记录类型为：A<br>主机记录分别为“@”，“wwww”。其中设置@，可以用xxx.com进行访问。设置www，可以使用www.xxx.com进行访问。<br>记录值都为 “192.30.252.153”</p>\n<ul>\n<li>添加CNAME文件</li>\n</ul>\n<p>打开自己本地的博客目录，在source文件夹下创建名为CNAME的文本文件。打开，输入自己的域名，格式为“xxx.com”，保存后使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>部署到github。</p>\n<p>至此，便可使用我们自己的域名进行访问了！</p>\n<h2 id=\"图片存储\"><a href=\"#图片存储\" class=\"headerlink\" title=\"图片存储\"></a>图片存储</h2><p>可以使用<a href=\"https://portal.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛云存储</a></p>\n<h2 id=\"Mac上好用的GIF图截屏工具\"><a href=\"#Mac上好用的GIF图截屏工具\" class=\"headerlink\" title=\"Mac上好用的GIF图截屏工具\"></a><a href=\"http://www.cockos.com/licecap/\" target=\"_blank\" rel=\"external\">Mac上好用的GIF图截屏工具</a></h2>"},{"layout":"post","title":"Mac搭建Hexo免费博客（一）","date":"2014-05-21T07:53:51.000Z","excerpt":"","comments":1,"_content":"\n## HEXO博客配置\n\n#### 前言\n\n由于项目忙完，需要搭建一个Blog记录下工作经历，这里使用的是Hexo。一个方便快捷的搭建Blog工具\n \n#### 关于Hexo\n\nHexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 [Hexo官网](https://hexo.io/zh-cn/)\n\n#### 环境搭建\n硬件 \n&emsp;此版本为Mac版👽\n软件\n    &emsp;node.js\n    &emsp;npm\n    &emsp;hexo\n    &emsp;github账号\n\n#### 安装node.js与npm\n\n下载node.js 有多种方法：使用 [Homebrew](https://brew.sh/index_zh-cn.html) 下载 或者直接下载安装包。 建议 node.js 直接下载 安装包，因为使用 brew 有可能失败，会被墙掉。\n\n[node.js下载地址](https://nodejs.org/en/download/)\n\n\nnode.js 下载完成后 安装到电脑上就可以了。安装成功后显示出来安装路径，可以看到 安装node.js 的时候 npm 也安装了。\n\n检测安装是否成功 终端输入 -v , 成功则显示版本号\n\n\n```\n$ node -v\nv4.3.1\n$ npm -v\n2.14.12\n```\n#### 安装Hexo\n\n文档里给出了详细的安装方法，只需要按其一步步来就好.\n\n```\n$ sudo npm install -g hexo-cli\n```\n安装成功，使用hexo 命令的时候，可能会出现以下错误\n\n```\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }    \n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n这个错误也没有造成任何影响，所以忽略，Go on。 完成后，验证下是否安装成功.\n\n```\nhexo -v\n```\n\n#### Hexo的使用\n###### 1.创建存放博客的文件夹\n\n```\n$ mkdir myblog\n```\n\n##### 2.执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\n\n```\nhexo init\n```\n输出以下信息\n\n```\nINFO  Cloning hexo-starter to ~/Documents/mytest\nCloning into '/Users/Quncao/Documents/mytest'...\n```\n成功之后文件夹的样子 \n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-26%20%E4%B8%8B%E5%8D%884.13.00.png)\n\n_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项\nscaffolds : 脚手架，用于存放我们创建文章时的模版\nsource : 用于存放我们用markdown编写的博文原文件、其他静态资源文件\nthemes : 用于存放主题，里面有我们博客的默认主题landscape\n##### 3. 执行以下命令，进行依赖包的安装\n\n```\nsudo npm install\n```\nnode_modules: 关联保存了将会使用到的hexo依赖包\n\n##### 4. 安装相关插件\n插件会安装至node_modules文件夹下，如果已经安装好的可以直接忽略.\n\n- 安装便于自动部署到Github上的插件\n\n```\n$ npm install hexo-deployer-git --save\n```\n- 安装atom生成插件，便于感兴趣的小伙伴们订阅\n\n```\n$ npm install hexo-generator-feed --save\n```\n\n- 安装博客首页生成插件\n- \n```\n$ npm install hexo-generator-index --save\n```\n\n- 安装归档生成插件\n\n```\n$ npm install hexo-generator-archive --save\n```\n\n- 安装tag生成插件\n\n```\n$ npm install hexo-generator-tag --save\n```\n\n- 安装category生成插件\n\n```\n$ npm install hexo-generator-category --save\n```\n\n- 安装Sitemap文件生成插件\n\n```\n$ npm install hexo-generator-sitemap --save\n```\n\n- 安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求\n\n```\n$ npm install hexo-generator-baidu-sitemap --save\n```\n\n---\n\n*本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步[第二篇](https://leoantu.github.io/2014/04/25/Mac%E6%90%AD%E5%BB%BAHexo%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/)吧*\n\n","source":"_posts/Mac搭建Hexo免费博客（一).md","raw":"---\nlayout : post\ntitle: Mac搭建Hexo免费博客（一）\ndate: 2014-05-21 15:53:51\ntags: Blog\nexcerpt: \"根据hexo搭建博客-步骤1\"\ncomments: true\n---\n\n## HEXO博客配置\n\n#### 前言\n\n由于项目忙完，需要搭建一个Blog记录下工作经历，这里使用的是Hexo。一个方便快捷的搭建Blog工具\n \n#### 关于Hexo\n\nHexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 [Hexo官网](https://hexo.io/zh-cn/)\n\n#### 环境搭建\n硬件 \n&emsp;此版本为Mac版👽\n软件\n    &emsp;node.js\n    &emsp;npm\n    &emsp;hexo\n    &emsp;github账号\n\n#### 安装node.js与npm\n\n下载node.js 有多种方法：使用 [Homebrew](https://brew.sh/index_zh-cn.html) 下载 或者直接下载安装包。 建议 node.js 直接下载 安装包，因为使用 brew 有可能失败，会被墙掉。\n\n[node.js下载地址](https://nodejs.org/en/download/)\n\n\nnode.js 下载完成后 安装到电脑上就可以了。安装成功后显示出来安装路径，可以看到 安装node.js 的时候 npm 也安装了。\n\n检测安装是否成功 终端输入 -v , 成功则显示版本号\n\n\n```\n$ node -v\nv4.3.1\n$ npm -v\n2.14.12\n```\n#### 安装Hexo\n\n文档里给出了详细的安装方法，只需要按其一步步来就好.\n\n```\n$ sudo npm install -g hexo-cli\n```\n安装成功，使用hexo 命令的时候，可能会出现以下错误\n\n```\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }    \n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n这个错误也没有造成任何影响，所以忽略，Go on。 完成后，验证下是否安装成功.\n\n```\nhexo -v\n```\n\n#### Hexo的使用\n###### 1.创建存放博客的文件夹\n\n```\n$ mkdir myblog\n```\n\n##### 2.执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\n\n```\nhexo init\n```\n输出以下信息\n\n```\nINFO  Cloning hexo-starter to ~/Documents/mytest\nCloning into '/Users/Quncao/Documents/mytest'...\n```\n成功之后文件夹的样子 \n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-26%20%E4%B8%8B%E5%8D%884.13.00.png)\n\n_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项\nscaffolds : 脚手架，用于存放我们创建文章时的模版\nsource : 用于存放我们用markdown编写的博文原文件、其他静态资源文件\nthemes : 用于存放主题，里面有我们博客的默认主题landscape\n##### 3. 执行以下命令，进行依赖包的安装\n\n```\nsudo npm install\n```\nnode_modules: 关联保存了将会使用到的hexo依赖包\n\n##### 4. 安装相关插件\n插件会安装至node_modules文件夹下，如果已经安装好的可以直接忽略.\n\n- 安装便于自动部署到Github上的插件\n\n```\n$ npm install hexo-deployer-git --save\n```\n- 安装atom生成插件，便于感兴趣的小伙伴们订阅\n\n```\n$ npm install hexo-generator-feed --save\n```\n\n- 安装博客首页生成插件\n- \n```\n$ npm install hexo-generator-index --save\n```\n\n- 安装归档生成插件\n\n```\n$ npm install hexo-generator-archive --save\n```\n\n- 安装tag生成插件\n\n```\n$ npm install hexo-generator-tag --save\n```\n\n- 安装category生成插件\n\n```\n$ npm install hexo-generator-category --save\n```\n\n- 安装Sitemap文件生成插件\n\n```\n$ npm install hexo-generator-sitemap --save\n```\n\n- 安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求\n\n```\n$ npm install hexo-generator-baidu-sitemap --save\n```\n\n---\n\n*本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步[第二篇](https://leoantu.github.io/2014/04/25/Mac%E6%90%AD%E5%BB%BAHexo%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/)吧*\n\n","slug":"Mac搭建Hexo免费博客（一)","published":1,"updated":"2017-05-16T09:55:08.000Z","photos":[],"link":"","_id":"cj2rdwd0t00030io660qvjz3d","content":"<h2 id=\"HEXO博客配置\"><a href=\"#HEXO博客配置\" class=\"headerlink\" title=\"HEXO博客配置\"></a>HEXO博客配置</h2><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>由于项目忙完，需要搭建一个Blog记录下工作经历，这里使用的是Hexo。一个方便快捷的搭建Blog工具</p>\n<h4 id=\"关于Hexo\"><a href=\"#关于Hexo\" class=\"headerlink\" title=\"关于Hexo\"></a>关于Hexo</h4><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo官网</a></p>\n<h4 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h4><p>硬件<br>&emsp;此版本为Mac版👽<br>软件<br>    &emsp;node.js<br>    &emsp;npm<br>    &emsp;hexo<br>    &emsp;github账号</p>\n<h4 id=\"安装node-js与npm\"><a href=\"#安装node-js与npm\" class=\"headerlink\" title=\"安装node.js与npm\"></a>安装node.js与npm</h4><p>下载node.js 有多种方法：使用 <a href=\"https://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"external\">Homebrew</a> 下载 或者直接下载安装包。 建议 node.js 直接下载 安装包，因为使用 brew 有可能失败，会被墙掉。</p>\n<p><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">node.js下载地址</a></p>\n<p>node.js 下载完成后 安装到电脑上就可以了。安装成功后显示出来安装路径，可以看到 安装node.js 的时候 npm 也安装了。</p>\n<p>检测安装是否成功 终端输入 -v , 成功则显示版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div><div class=\"line\">v4.3.1</div><div class=\"line\">$ npm -v</div><div class=\"line\">2.14.12</div></pre></td></tr></table></figure>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>文档里给出了详细的安装方法，只需要按其一步步来就好.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>安装成功，使用hexo 命令的时候，可能会出现以下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;    </div><div class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div></pre></td></tr></table></figure>\n<p>这个错误也没有造成任何影响，所以忽略，Go on。 完成后，验证下是否安装成功.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure>\n<h4 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h4><h6 id=\"1-创建存放博客的文件夹\"><a href=\"#1-创建存放博客的文件夹\" class=\"headerlink\" title=\"1.创建存放博客的文件夹\"></a>1.创建存放博客的文件夹</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myblog</div></pre></td></tr></table></figure>\n<h5 id=\"2-执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\"><a href=\"#2-执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\" class=\"headerlink\" title=\"2.执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\"></a>2.执行以下命令，Hexo会在目标文件夹建立博客所需要的文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>输出以下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Cloning hexo-starter to ~/Documents/mytest</div><div class=\"line\">Cloning into &apos;/Users/Quncao/Documents/mytest&apos;...</div></pre></td></tr></table></figure>\n<p>成功之后文件夹的样子<br><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-26%20%E4%B8%8B%E5%8D%884.13.00.png\" alt=\"\"></p>\n<p>_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项<br>scaffolds : 脚手架，用于存放我们创建文章时的模版<br>source : 用于存放我们用markdown编写的博文原文件、其他静态资源文件<br>themes : 用于存放主题，里面有我们博客的默认主题landscape</p>\n<h5 id=\"3-执行以下命令，进行依赖包的安装\"><a href=\"#3-执行以下命令，进行依赖包的安装\" class=\"headerlink\" title=\"3. 执行以下命令，进行依赖包的安装\"></a>3. 执行以下命令，进行依赖包的安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install</div></pre></td></tr></table></figure>\n<p>node_modules: 关联保存了将会使用到的hexo依赖包</p>\n<h5 id=\"4-安装相关插件\"><a href=\"#4-安装相关插件\" class=\"headerlink\" title=\"4. 安装相关插件\"></a>4. 安装相关插件</h5><p>插件会安装至node_modules文件夹下，如果已经安装好的可以直接忽略.</p>\n<ul>\n<li>安装便于自动部署到Github上的插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装atom生成插件，便于感兴趣的小伙伴们订阅</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装博客首页生成插件</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-index --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装归档生成插件</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-archive --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装tag生成插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-tag --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装category生成插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-category --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装Sitemap文件生成插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n<hr>\n<p><em>本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步<a href=\"https://leoantu.github.io/2014/04/25/Mac%E6%90%AD%E5%BB%BAHexo%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/\">第二篇</a>吧</em></p>\n","site":{"data":{}},"more":"<h2 id=\"HEXO博客配置\"><a href=\"#HEXO博客配置\" class=\"headerlink\" title=\"HEXO博客配置\"></a>HEXO博客配置</h2><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>由于项目忙完，需要搭建一个Blog记录下工作经历，这里使用的是Hexo。一个方便快捷的搭建Blog工具</p>\n<h4 id=\"关于Hexo\"><a href=\"#关于Hexo\" class=\"headerlink\" title=\"关于Hexo\"></a>关于Hexo</h4><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo官网</a></p>\n<h4 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h4><p>硬件<br>&emsp;此版本为Mac版👽<br>软件<br>    &emsp;node.js<br>    &emsp;npm<br>    &emsp;hexo<br>    &emsp;github账号</p>\n<h4 id=\"安装node-js与npm\"><a href=\"#安装node-js与npm\" class=\"headerlink\" title=\"安装node.js与npm\"></a>安装node.js与npm</h4><p>下载node.js 有多种方法：使用 <a href=\"https://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"external\">Homebrew</a> 下载 或者直接下载安装包。 建议 node.js 直接下载 安装包，因为使用 brew 有可能失败，会被墙掉。</p>\n<p><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">node.js下载地址</a></p>\n<p>node.js 下载完成后 安装到电脑上就可以了。安装成功后显示出来安装路径，可以看到 安装node.js 的时候 npm 也安装了。</p>\n<p>检测安装是否成功 终端输入 -v , 成功则显示版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div><div class=\"line\">v4.3.1</div><div class=\"line\">$ npm -v</div><div class=\"line\">2.14.12</div></pre></td></tr></table></figure>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>文档里给出了详细的安装方法，只需要按其一步步来就好.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>安装成功，使用hexo 命令的时候，可能会出现以下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;    </div><div class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div></pre></td></tr></table></figure>\n<p>这个错误也没有造成任何影响，所以忽略，Go on。 完成后，验证下是否安装成功.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure>\n<h4 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h4><h6 id=\"1-创建存放博客的文件夹\"><a href=\"#1-创建存放博客的文件夹\" class=\"headerlink\" title=\"1.创建存放博客的文件夹\"></a>1.创建存放博客的文件夹</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myblog</div></pre></td></tr></table></figure>\n<h5 id=\"2-执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\"><a href=\"#2-执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\" class=\"headerlink\" title=\"2.执行以下命令，Hexo会在目标文件夹建立博客所需要的文件\"></a>2.执行以下命令，Hexo会在目标文件夹建立博客所需要的文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>输出以下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Cloning hexo-starter to ~/Documents/mytest</div><div class=\"line\">Cloning into &apos;/Users/Quncao/Documents/mytest&apos;...</div></pre></td></tr></table></figure>\n<p>成功之后文件夹的样子<br><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-26%20%E4%B8%8B%E5%8D%884.13.00.png\" alt=\"\"></p>\n<p>_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项<br>scaffolds : 脚手架，用于存放我们创建文章时的模版<br>source : 用于存放我们用markdown编写的博文原文件、其他静态资源文件<br>themes : 用于存放主题，里面有我们博客的默认主题landscape</p>\n<h5 id=\"3-执行以下命令，进行依赖包的安装\"><a href=\"#3-执行以下命令，进行依赖包的安装\" class=\"headerlink\" title=\"3. 执行以下命令，进行依赖包的安装\"></a>3. 执行以下命令，进行依赖包的安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install</div></pre></td></tr></table></figure>\n<p>node_modules: 关联保存了将会使用到的hexo依赖包</p>\n<h5 id=\"4-安装相关插件\"><a href=\"#4-安装相关插件\" class=\"headerlink\" title=\"4. 安装相关插件\"></a>4. 安装相关插件</h5><p>插件会安装至node_modules文件夹下，如果已经安装好的可以直接忽略.</p>\n<ul>\n<li>安装便于自动部署到Github上的插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装atom生成插件，便于感兴趣的小伙伴们订阅</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装博客首页生成插件</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-index --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装归档生成插件</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-archive --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装tag生成插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-tag --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装category生成插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-category --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装Sitemap文件生成插件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n<ul>\n<li>安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n<hr>\n<p><em>本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步<a href=\"https://leoantu.github.io/2014/04/25/Mac%E6%90%AD%E5%BB%BAHexo%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/\">第二篇</a>吧</em></p>\n"},{"layout":"post","title":"一款快速上传项目到git及建立私有Pod源的脚本","date":"2014-11-28T08:33:51.000Z","comments":1,"_content":"\n一款快速上传项目到git及建立自己的私有Pod源脚本，方便快捷。[下载podShell](https://github.com/leoAntu/podShell)\n\n####1.先到git上开一个repo。\n\n    ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/B60AC312-71C3-4C7B-A7BD-668D4351C0E0.png?raw=true)\n    \n    \n    \n    \n####2.创建文件夹，将podShell拖入到文件夹。\n\n 通过终端进入文件夹路径。\n ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/1BB6C498-C4DE-40DF-B8F5-E92BBC5D56D1.png?raw=true)\n \n####3.运行.config.sh文件。\n\n 依次填入对应的信息\n ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/66233E78-521E-464C-A275-4F6AF20BCB29.png?raw=true)\n \n最后发现podShell同级文件夹会如下图所示。\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/98E63650-F698-41B5-BC75-A0B02E3D34D2.png?raw=true)\n\n####4.将需要上传的文件拖入到图中Demo文件夹目录即可,运行tag.sh\n\n    输入对应的tag号\n    ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/C4ACFA9F-0398-4B66-98FC-7E02D672FA80.png?raw=true)\n    \n**此时已经将项目上传至git并打上tag值。但是还没有发布自己的Pods。**\n\n#### 5.注册Trunk\n\n```\npod trunk register email 'name' --description='macbook air'\n```\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/87A7C773-625D-4228-8253-E7462704AB6C.png?raw=true)\n\n此时，你的邮箱会收到一封邮件。复制链接打开即可。(一般只需注册一次即可，后期发布其他项目都不需)\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/F0DA55C8-274A-4A3E-A34C-08E884C9484D.png?raw=true)\n\n####6.发布到pod trunk\n\n```\npod trunk push leoTestDemo.podspec\n```\n\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/D93F3646-04DE-49D8-91F7-94C9C53E4480.png?raw=true)\n如上图所示发布成功\n\n####7.更新pod库\n\n发布成功。通过pod search指令可能不是立即找到我们发布的项目，可通过下面两条指令操作。\n\n```\npod setup\n```\n\n删除本地索引\n\n```\nrm -f ~/Library/Caches/CocoaPods/search_index.json\n```\n\n","source":"_posts/一款快速上传项目到git及建立私有Pod源的脚本.md","raw":"---\nlayout : post\ntitle: 一款快速上传项目到git及建立私有Pod源的脚本\ndate: 2014-11-28 16:33:51\ntags: Blog\ncomments: true\n---\n\n一款快速上传项目到git及建立自己的私有Pod源脚本，方便快捷。[下载podShell](https://github.com/leoAntu/podShell)\n\n####1.先到git上开一个repo。\n\n    ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/B60AC312-71C3-4C7B-A7BD-668D4351C0E0.png?raw=true)\n    \n    \n    \n    \n####2.创建文件夹，将podShell拖入到文件夹。\n\n 通过终端进入文件夹路径。\n ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/1BB6C498-C4DE-40DF-B8F5-E92BBC5D56D1.png?raw=true)\n \n####3.运行.config.sh文件。\n\n 依次填入对应的信息\n ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/66233E78-521E-464C-A275-4F6AF20BCB29.png?raw=true)\n \n最后发现podShell同级文件夹会如下图所示。\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/98E63650-F698-41B5-BC75-A0B02E3D34D2.png?raw=true)\n\n####4.将需要上传的文件拖入到图中Demo文件夹目录即可,运行tag.sh\n\n    输入对应的tag号\n    ![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/C4ACFA9F-0398-4B66-98FC-7E02D672FA80.png?raw=true)\n    \n**此时已经将项目上传至git并打上tag值。但是还没有发布自己的Pods。**\n\n#### 5.注册Trunk\n\n```\npod trunk register email 'name' --description='macbook air'\n```\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/87A7C773-625D-4228-8253-E7462704AB6C.png?raw=true)\n\n此时，你的邮箱会收到一封邮件。复制链接打开即可。(一般只需注册一次即可，后期发布其他项目都不需)\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/F0DA55C8-274A-4A3E-A34C-08E884C9484D.png?raw=true)\n\n####6.发布到pod trunk\n\n```\npod trunk push leoTestDemo.podspec\n```\n\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/D93F3646-04DE-49D8-91F7-94C9C53E4480.png?raw=true)\n如上图所示发布成功\n\n####7.更新pod库\n\n发布成功。通过pod search指令可能不是立即找到我们发布的项目，可通过下面两条指令操作。\n\n```\npod setup\n```\n\n删除本地索引\n\n```\nrm -f ~/Library/Caches/CocoaPods/search_index.json\n```\n\n","slug":"一款快速上传项目到git及建立私有Pod源的脚本","published":1,"updated":"2017-05-16T09:56:44.000Z","photos":[],"link":"","_id":"cj2rdwd1300040io69nprddrp","content":"<p>一款快速上传项目到git及建立自己的私有Pod源脚本，方便快捷。<a href=\"https://github.com/leoAntu/podShell\" target=\"_blank\" rel=\"external\">下载podShell</a></p>\n<p>####1.先到git上开一个repo。</p>\n<pre><code>![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/B60AC312-71C3-4C7B-A7BD-668D4351C0E0.png?raw=true)\n</code></pre><p>####2.创建文件夹，将podShell拖入到文件夹。</p>\n<p> 通过终端进入文件夹路径。<br> <img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/1BB6C498-C4DE-40DF-B8F5-E92BBC5D56D1.png?raw=true\" alt=\"\"></p>\n<p>####3.运行.config.sh文件。</p>\n<p> 依次填入对应的信息<br> <img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/66233E78-521E-464C-A275-4F6AF20BCB29.png?raw=true\" alt=\"\"></p>\n<p>最后发现podShell同级文件夹会如下图所示。<br><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/98E63650-F698-41B5-BC75-A0B02E3D34D2.png?raw=true\" alt=\"\"></p>\n<p>####4.将需要上传的文件拖入到图中Demo文件夹目录即可,运行tag.sh</p>\n<pre><code>输入对应的tag号\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/C4ACFA9F-0398-4B66-98FC-7E02D672FA80.png?raw=true)\n</code></pre><p><strong>此时已经将项目上传至git并打上tag值。但是还没有发布自己的Pods。</strong></p>\n<h4 id=\"5-注册Trunk\"><a href=\"#5-注册Trunk\" class=\"headerlink\" title=\"5.注册Trunk\"></a>5.注册Trunk</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk register email &apos;name&apos; --description=&apos;macbook air&apos;</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/87A7C773-625D-4228-8253-E7462704AB6C.png?raw=true\" alt=\"\"></p>\n<p>此时，你的邮箱会收到一封邮件。复制链接打开即可。(一般只需注册一次即可，后期发布其他项目都不需)<br><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/F0DA55C8-274A-4A3E-A34C-08E884C9484D.png?raw=true\" alt=\"\"></p>\n<p>####6.发布到pod trunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk push leoTestDemo.podspec</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/D93F3646-04DE-49D8-91F7-94C9C53E4480.png?raw=true\" alt=\"\"><br>如上图所示发布成功</p>\n<p>####7.更新pod库</p>\n<p>发布成功。通过pod search指令可能不是立即找到我们发布的项目，可通过下面两条指令操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<p>删除本地索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -f ~/Library/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一款快速上传项目到git及建立自己的私有Pod源脚本，方便快捷。<a href=\"https://github.com/leoAntu/podShell\" target=\"_blank\" rel=\"external\">下载podShell</a></p>\n<p>####1.先到git上开一个repo。</p>\n<pre><code>![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/B60AC312-71C3-4C7B-A7BD-668D4351C0E0.png?raw=true)\n</code></pre><p>####2.创建文件夹，将podShell拖入到文件夹。</p>\n<p> 通过终端进入文件夹路径。<br> <img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/1BB6C498-C4DE-40DF-B8F5-E92BBC5D56D1.png?raw=true\" alt=\"\"></p>\n<p>####3.运行.config.sh文件。</p>\n<p> 依次填入对应的信息<br> <img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/66233E78-521E-464C-A275-4F6AF20BCB29.png?raw=true\" alt=\"\"></p>\n<p>最后发现podShell同级文件夹会如下图所示。<br><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/98E63650-F698-41B5-BC75-A0B02E3D34D2.png?raw=true\" alt=\"\"></p>\n<p>####4.将需要上传的文件拖入到图中Demo文件夹目录即可,运行tag.sh</p>\n<pre><code>输入对应的tag号\n![](https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/C4ACFA9F-0398-4B66-98FC-7E02D672FA80.png?raw=true)\n</code></pre><p><strong>此时已经将项目上传至git并打上tag值。但是还没有发布自己的Pods。</strong></p>\n<h4 id=\"5-注册Trunk\"><a href=\"#5-注册Trunk\" class=\"headerlink\" title=\"5.注册Trunk\"></a>5.注册Trunk</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk register email &apos;name&apos; --description=&apos;macbook air&apos;</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/87A7C773-625D-4228-8253-E7462704AB6C.png?raw=true\" alt=\"\"></p>\n<p>此时，你的邮箱会收到一封邮件。复制链接打开即可。(一般只需注册一次即可，后期发布其他项目都不需)<br><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/F0DA55C8-274A-4A3E-A34C-08E884C9484D.png?raw=true\" alt=\"\"></p>\n<p>####6.发布到pod trunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk push leoTestDemo.podspec</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/leoAntu/leoImagesStorage/blob/master/leoImagesStorage/D93F3646-04DE-49D8-91F7-94C9C53E4480.png?raw=true\" alt=\"\"><br>如上图所示发布成功</p>\n<p>####7.更新pod库</p>\n<p>发布成功。通过pod search指令可能不是立即找到我们发布的项目，可通过下面两条指令操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<p>删除本地索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -f ~/Library/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Mac搭建Hexo免费博客（二）","date":"2014-05-25T07:53:51.000Z","excerpt":"","comments":1,"_content":"\n上篇讲到Hexo的安装，本篇继续，先来说说Hexo安装后的文件结构与功能。\n\n## HEXO博客配置\n\n#### 1. Hexo设置\n\n打开根目录下的_config.yml文件\n \n##### 1.1 站点配置\n\n```\n1 # Site\n2 title: myblog   # 网站标题\n3 subtitle:      # 网站子标题\n4 description: 这是一个利用Hexo搭建的博客    # 网站描述\n5 author:  author   # 网站作者，也就是您的名字\n6 language: zh-cn   # 网站使用的语言        \n7 timezone:         # 网站时区。Hexo 预设使用您电脑的时区。\n```\n\n##### 1.2 网址配置\n```\n1 # URL\n2 url: http://xiaoxuetu.github.io         # 博客网址\n3 root: /                                 # 网站根目录\n4 permalink: :year/:month/:day/:title/    # 文章的永久链接格式   :year/:month/:day/:title/\n5 permalink_defaults:                     # 永久链接中各部分的默认值\n```\n*注意！ 如果你的网站存放在子目录中，例如 http://xiaoxuetu.github.io/blog, 则将url设为http://xiaoxuetu.github.io/blog， 并且把 root 设为/blog/。*\n\n##### 1.3 目录配置\n\n一般直接取默认值不用修改。\n\n```\n1 # Directory\n2 source_dir: source         # 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文\n3 public_dir: public         # 公共文件夹，这个文件夹用于存放生成的静态博客文件。\n4 tag_dir: tags              # 标签文件夹\n5 archive_dir: archives      # 归档文件夹\n6 category_dir: categories   # 分类文件夹\n7 code_dir: downloads/code   # Include code 文件夹\n8 i18n_dir: :lang            # 国际化（i18n）文件夹\n9 skip_render:               # 跳过指定文件的渲染，您可使用 glob 来配置路径。\n```\n##### 1.4 文章配置\n\n一般直接取默认值不用修改。\n\n```\n1 # Writing\n 2 new_post_name: :title.md    # 新文章的文件名称\n 3 default_layout: post        # 预设布局\n 4 titlecase: false            # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）\n 5 external_link: true         # 在新标签中打开链接\n 6 filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变\n 7 render_drafts: false        # 显示草稿\n 8 post_asset_folder: false    # 启动 Asset 文件夹\n 9 relative_link: false        # 把链接改为与根目录的相对位址\n10 future: true                # 显示未来的文章\n11 highlight:                  # 代码块的设置\n12   enable: true              \n13   line_number: true         # 是否显示行号\n14   auto_detect: true         # 是否自动监测\n15   tab_replace:              # 将 tab 替换成其他字符串\n```\n\n##### 1.5 分类和标签配置\n\n一般直接取默认值不用修改。\n\n```\n1 # Category & Tag\n2 default_category: uncategorized    # 默认分类, uncategorized表示未分类\n3 category_map:                      # 分类别名\n4 tag_map:                           # 标签别名\n```\n\n##### 1.6 日期 以及 时间格式 配置\n\n```\n1 date_format: YYYY-MM-DD           # 日期格式\n2 time_format: HH:mm:ss             # 时间格式\n```\n\n##### 1.7 分页配置\n\n```\n1 # Pagination\n2 per_page: 10                      # 每页显示的文章量，如果设置值为0，则表示禁止分野\n3 pagination_dir: page              # 分页目录\n```\n##### 1.8 主题配置\n从这里开始，都是属于Hexo拓展插件的配置了。以下代码，主要是主题配置。更详细的主题替换，看第二节\n\n```\n1 # Extensions\n2 theme: landscape    # 主题设置，默认是 landscape\n```\n##### 1.9 部署配置\n\n这里主要用于将博客部署到github上，详细教程在后面。\n\n```\n1 # Deployment\n2 deploy:\n3   type:     # 设置发布类型，如git，rsync\n```\n---\n#### 主题设置\n\nHexo为我们提供了很多的主题供我们选择，网页在[这里](http://hexo.io/themes/) 我们可以自由选择自己喜欢的主题来进行设置。\n\n[github主题列表地址](https://github.com/hexojs/hexo/wiki/Themes)\n\n修改方法，就是将相应的主题clone到博客文件夹下的themes文件夹下，然后将上面1.8中的主题名字设置为相应的修改的名字。\n我用的是这个：[hexo-theme-hueman](https://github.com/ppoffice/hexo-theme-hueman)\n\n```\n# Extensions\n## Themes: https://hexo.io/themes/\ntheme: hexo-theme-hueman\n```\n\n想要看到修改后的效果，可以在终端中继续执行以下命令。\n\n```\nhexo clean    \nhexo generate\n```\n\n以上命令完成后，可以执行\n\n```\nhexo s\n```\n> hexo s 等同于 hexo server , s 其实就是 server的缩写\n\n执行成功后，控制台将会输出\n\n```\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n用浏览器打开此站点，就可以看到我们用Hexo生成的网页。\n\n##### 新建博文\n\ncd到博客文件的根目录下，使用以下命令，新建博客\n\n```\nhexo new \"title\"\n```\n\n格式是： hexo new ｛文章名｝\n命令执行成功后，你就会发现在 source/_posts 目录下多了一个文件 title.md 。\n\n在文件夹下使用之前我们下载的markdown编辑器，打开这个文件，会看到以下内容\n\n```\n title: title\n date: \n tags:\n ---\n```\n\n含义是：\n\n* title : 文章的标题\n* date : 该文章的创建时间\n* tags : 该文章的标记tag\n\n依据不同的主题，多标签的语法格式为\n\n```\ntags: \n    - 标签1\n    - 标签2\n```\n\n或者\n\n```\ntags: [标签1,标签2]\n```\n\n你可以添加你所需要的变量，如果觉得每次生成后更改很麻烦，可以在模板文件夹scaffolds下找到post.md文件，编辑它的Front-matter为你想要的变量参数，默认新建博文使用的post模板。\n\n##### 创建自己制定模板\n\n如果你想使用其他模板，你可以使用下列命令来创建指定模板的博文：\n\n```\nhexo new scaffold \"title\"\n```\n请确保使用的模板scaffold在scaffolds存在。\n\n##### 文章摘要\n\n这个功能很实用，可以让你在首页文章目录不必显示全部的文章内容，只显示指定摘要。\n\n```\n以上是摘要\n<!--more-->\n以下是全文\n```\n\n---\n\n使用markdown编辑好博文后，就可以执行\n\n```\nhexo generate\n```\n此命令主要用于部署网页的静态文件，每次修改后都应该首先执行此命令，来重新部署\n\n然后继续执行“hexo s”启动服务。\n\n至此，Hexo的网页部署全部完成，之后就是部署到github上了。\n\n---\n\n## 部署到github\n\n##### 1.注册账号\n\n如果有github账号的，可以忽略，没有请移步[github](www.github.com)注册账号\n\n##### 2.创建与你的github用户名对应的仓库\n\n仓库名字必须为“username.github.io”， 其中“username”为你的用户名\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.38.37.png)\n\n点击右上角的加号，创建new repository，然后输入“username.github.io”，点击创建。\n\n##### 3.创建Github Pages\n\nrepository创建完成后进入以下界面\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.43.20.png)\n\n点击最右边的Settings\n\n进入后找到创建Github Pages的地方\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.45.28.png)\n\n点击 Launch automatic page generator\n最后生成主页：\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/github_pages_themes.png)\n\n之后我们就可以直接访问“username.github.io”，去访问我们的博客了。\n\n##### 4.配置git\n\n由于mac自带git，所以直接打开终端进行设置\n\n设置用户名密码\n\n```\ngit config --global user.email \"你的github邮箱\"\ngit config --global user.name \"你的github用户名\"\n```\n\n生成密钥\n\n```\nssh-keygen -t rsa -C \"你的邮箱\"\n```\n\n回车之后，打开Finder,前往文件夹[~/.ssh]中会看到生成的两个文件\n> id_rsa    id_rsa.pub\n\n其中id_rsa是私钥，id_rsa.pub是龚玥\n\n然后执行以下命令，添加生成的key\n\n```\nssh-add id_rsa\n```\n\n然后将id_rsa.pub中的内容复制下来，在我们github的主页中，点击个人的账户，找到settings-->SSH keys，将我们复制的内容，添加在这里。title随便取个名字就好。\n\n添加成功之后，可以在终端测试\n\n```\nssh -T git@github.com\n```\n\n点击回车后输出内容中，最后一句话为\n\n```\nYou've successfully authenticated, but github does not provide shell access.\n```\n\n至此，验证成功。\n\n##### 5.最后一步，将我们用Hexo生成的网页部署到github\n\n在我们的博客根目录下，打开站点配置文件**_config.yml**\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy: \n  type: git\n  repository: https://github.com/username/username.github.io.git\n  branch: master\n```\n其中“username”为你github的用户名。\n\n修改完保存后，就可以打开终端，cd到博客根目录，执行\n\n```\nhexo generate #生成静态网页\nhexo deploy #部署到github\n```\n\n之后输出以下信息\n\n```\nINFO Deploy done: git\n```\n\n说明我们的博客已经部署成功，github pages可能会存在延时，过几分钟后，就可以通过username.github.io去访问我们的博客了！\n\n---\n\n*本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步第三篇吧*\n\n","source":"_posts/Mac搭建Hexo免费博客（二）.md","raw":"---\nlayout : post\ntitle: Mac搭建Hexo免费博客（二）\ndate: 2014-05-25 15:53:51\ntags: Blog\nexcerpt: \"根据hexo搭建博客-步骤2\"\ncomments: true\n---\n\n上篇讲到Hexo的安装，本篇继续，先来说说Hexo安装后的文件结构与功能。\n\n## HEXO博客配置\n\n#### 1. Hexo设置\n\n打开根目录下的_config.yml文件\n \n##### 1.1 站点配置\n\n```\n1 # Site\n2 title: myblog   # 网站标题\n3 subtitle:      # 网站子标题\n4 description: 这是一个利用Hexo搭建的博客    # 网站描述\n5 author:  author   # 网站作者，也就是您的名字\n6 language: zh-cn   # 网站使用的语言        \n7 timezone:         # 网站时区。Hexo 预设使用您电脑的时区。\n```\n\n##### 1.2 网址配置\n```\n1 # URL\n2 url: http://xiaoxuetu.github.io         # 博客网址\n3 root: /                                 # 网站根目录\n4 permalink: :year/:month/:day/:title/    # 文章的永久链接格式   :year/:month/:day/:title/\n5 permalink_defaults:                     # 永久链接中各部分的默认值\n```\n*注意！ 如果你的网站存放在子目录中，例如 http://xiaoxuetu.github.io/blog, 则将url设为http://xiaoxuetu.github.io/blog， 并且把 root 设为/blog/。*\n\n##### 1.3 目录配置\n\n一般直接取默认值不用修改。\n\n```\n1 # Directory\n2 source_dir: source         # 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文\n3 public_dir: public         # 公共文件夹，这个文件夹用于存放生成的静态博客文件。\n4 tag_dir: tags              # 标签文件夹\n5 archive_dir: archives      # 归档文件夹\n6 category_dir: categories   # 分类文件夹\n7 code_dir: downloads/code   # Include code 文件夹\n8 i18n_dir: :lang            # 国际化（i18n）文件夹\n9 skip_render:               # 跳过指定文件的渲染，您可使用 glob 来配置路径。\n```\n##### 1.4 文章配置\n\n一般直接取默认值不用修改。\n\n```\n1 # Writing\n 2 new_post_name: :title.md    # 新文章的文件名称\n 3 default_layout: post        # 预设布局\n 4 titlecase: false            # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）\n 5 external_link: true         # 在新标签中打开链接\n 6 filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变\n 7 render_drafts: false        # 显示草稿\n 8 post_asset_folder: false    # 启动 Asset 文件夹\n 9 relative_link: false        # 把链接改为与根目录的相对位址\n10 future: true                # 显示未来的文章\n11 highlight:                  # 代码块的设置\n12   enable: true              \n13   line_number: true         # 是否显示行号\n14   auto_detect: true         # 是否自动监测\n15   tab_replace:              # 将 tab 替换成其他字符串\n```\n\n##### 1.5 分类和标签配置\n\n一般直接取默认值不用修改。\n\n```\n1 # Category & Tag\n2 default_category: uncategorized    # 默认分类, uncategorized表示未分类\n3 category_map:                      # 分类别名\n4 tag_map:                           # 标签别名\n```\n\n##### 1.6 日期 以及 时间格式 配置\n\n```\n1 date_format: YYYY-MM-DD           # 日期格式\n2 time_format: HH:mm:ss             # 时间格式\n```\n\n##### 1.7 分页配置\n\n```\n1 # Pagination\n2 per_page: 10                      # 每页显示的文章量，如果设置值为0，则表示禁止分野\n3 pagination_dir: page              # 分页目录\n```\n##### 1.8 主题配置\n从这里开始，都是属于Hexo拓展插件的配置了。以下代码，主要是主题配置。更详细的主题替换，看第二节\n\n```\n1 # Extensions\n2 theme: landscape    # 主题设置，默认是 landscape\n```\n##### 1.9 部署配置\n\n这里主要用于将博客部署到github上，详细教程在后面。\n\n```\n1 # Deployment\n2 deploy:\n3   type:     # 设置发布类型，如git，rsync\n```\n---\n#### 主题设置\n\nHexo为我们提供了很多的主题供我们选择，网页在[这里](http://hexo.io/themes/) 我们可以自由选择自己喜欢的主题来进行设置。\n\n[github主题列表地址](https://github.com/hexojs/hexo/wiki/Themes)\n\n修改方法，就是将相应的主题clone到博客文件夹下的themes文件夹下，然后将上面1.8中的主题名字设置为相应的修改的名字。\n我用的是这个：[hexo-theme-hueman](https://github.com/ppoffice/hexo-theme-hueman)\n\n```\n# Extensions\n## Themes: https://hexo.io/themes/\ntheme: hexo-theme-hueman\n```\n\n想要看到修改后的效果，可以在终端中继续执行以下命令。\n\n```\nhexo clean    \nhexo generate\n```\n\n以上命令完成后，可以执行\n\n```\nhexo s\n```\n> hexo s 等同于 hexo server , s 其实就是 server的缩写\n\n执行成功后，控制台将会输出\n\n```\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n用浏览器打开此站点，就可以看到我们用Hexo生成的网页。\n\n##### 新建博文\n\ncd到博客文件的根目录下，使用以下命令，新建博客\n\n```\nhexo new \"title\"\n```\n\n格式是： hexo new ｛文章名｝\n命令执行成功后，你就会发现在 source/_posts 目录下多了一个文件 title.md 。\n\n在文件夹下使用之前我们下载的markdown编辑器，打开这个文件，会看到以下内容\n\n```\n title: title\n date: \n tags:\n ---\n```\n\n含义是：\n\n* title : 文章的标题\n* date : 该文章的创建时间\n* tags : 该文章的标记tag\n\n依据不同的主题，多标签的语法格式为\n\n```\ntags: \n    - 标签1\n    - 标签2\n```\n\n或者\n\n```\ntags: [标签1,标签2]\n```\n\n你可以添加你所需要的变量，如果觉得每次生成后更改很麻烦，可以在模板文件夹scaffolds下找到post.md文件，编辑它的Front-matter为你想要的变量参数，默认新建博文使用的post模板。\n\n##### 创建自己制定模板\n\n如果你想使用其他模板，你可以使用下列命令来创建指定模板的博文：\n\n```\nhexo new scaffold \"title\"\n```\n请确保使用的模板scaffold在scaffolds存在。\n\n##### 文章摘要\n\n这个功能很实用，可以让你在首页文章目录不必显示全部的文章内容，只显示指定摘要。\n\n```\n以上是摘要\n<!--more-->\n以下是全文\n```\n\n---\n\n使用markdown编辑好博文后，就可以执行\n\n```\nhexo generate\n```\n此命令主要用于部署网页的静态文件，每次修改后都应该首先执行此命令，来重新部署\n\n然后继续执行“hexo s”启动服务。\n\n至此，Hexo的网页部署全部完成，之后就是部署到github上了。\n\n---\n\n## 部署到github\n\n##### 1.注册账号\n\n如果有github账号的，可以忽略，没有请移步[github](www.github.com)注册账号\n\n##### 2.创建与你的github用户名对应的仓库\n\n仓库名字必须为“username.github.io”， 其中“username”为你的用户名\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.38.37.png)\n\n点击右上角的加号，创建new repository，然后输入“username.github.io”，点击创建。\n\n##### 3.创建Github Pages\n\nrepository创建完成后进入以下界面\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.43.20.png)\n\n点击最右边的Settings\n\n进入后找到创建Github Pages的地方\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.45.28.png)\n\n点击 Launch automatic page generator\n最后生成主页：\n\n![](http://7xr7f9.com1.z0.glb.clouddn.com/github_pages_themes.png)\n\n之后我们就可以直接访问“username.github.io”，去访问我们的博客了。\n\n##### 4.配置git\n\n由于mac自带git，所以直接打开终端进行设置\n\n设置用户名密码\n\n```\ngit config --global user.email \"你的github邮箱\"\ngit config --global user.name \"你的github用户名\"\n```\n\n生成密钥\n\n```\nssh-keygen -t rsa -C \"你的邮箱\"\n```\n\n回车之后，打开Finder,前往文件夹[~/.ssh]中会看到生成的两个文件\n> id_rsa    id_rsa.pub\n\n其中id_rsa是私钥，id_rsa.pub是龚玥\n\n然后执行以下命令，添加生成的key\n\n```\nssh-add id_rsa\n```\n\n然后将id_rsa.pub中的内容复制下来，在我们github的主页中，点击个人的账户，找到settings-->SSH keys，将我们复制的内容，添加在这里。title随便取个名字就好。\n\n添加成功之后，可以在终端测试\n\n```\nssh -T git@github.com\n```\n\n点击回车后输出内容中，最后一句话为\n\n```\nYou've successfully authenticated, but github does not provide shell access.\n```\n\n至此，验证成功。\n\n##### 5.最后一步，将我们用Hexo生成的网页部署到github\n\n在我们的博客根目录下，打开站点配置文件**_config.yml**\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy: \n  type: git\n  repository: https://github.com/username/username.github.io.git\n  branch: master\n```\n其中“username”为你github的用户名。\n\n修改完保存后，就可以打开终端，cd到博客根目录，执行\n\n```\nhexo generate #生成静态网页\nhexo deploy #部署到github\n```\n\n之后输出以下信息\n\n```\nINFO Deploy done: git\n```\n\n说明我们的博客已经部署成功，github pages可能会存在延时，过几分钟后，就可以通过username.github.io去访问我们的博客了！\n\n---\n\n*本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步第三篇吧*\n\n","slug":"Mac搭建Hexo免费博客（二）","published":1,"updated":"2017-05-16T09:55:08.000Z","photos":[],"link":"","_id":"cj2rdwd1700050io6xpwisghu","content":"<p>上篇讲到Hexo的安装，本篇继续，先来说说Hexo安装后的文件结构与功能。</p>\n<h2 id=\"HEXO博客配置\"><a href=\"#HEXO博客配置\" class=\"headerlink\" title=\"HEXO博客配置\"></a>HEXO博客配置</h2><h4 id=\"1-Hexo设置\"><a href=\"#1-Hexo设置\" class=\"headerlink\" title=\"1. Hexo设置\"></a>1. Hexo设置</h4><p>打开根目录下的_config.yml文件</p>\n<h5 id=\"1-1-站点配置\"><a href=\"#1-1-站点配置\" class=\"headerlink\" title=\"1.1 站点配置\"></a>1.1 站点配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Site</div><div class=\"line\">2 title: myblog   # 网站标题</div><div class=\"line\">3 subtitle:      # 网站子标题</div><div class=\"line\">4 description: 这是一个利用Hexo搭建的博客    # 网站描述</div><div class=\"line\">5 author:  author   # 网站作者，也就是您的名字</div><div class=\"line\">6 language: zh-cn   # 网站使用的语言        </div><div class=\"line\">7 timezone:         # 网站时区。Hexo 预设使用您电脑的时区。</div></pre></td></tr></table></figure>\n<h5 id=\"1-2-网址配置\"><a href=\"#1-2-网址配置\" class=\"headerlink\" title=\"1.2 网址配置\"></a>1.2 网址配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # URL</div><div class=\"line\">2 url: http://xiaoxuetu.github.io         # 博客网址</div><div class=\"line\">3 root: /                                 # 网站根目录</div><div class=\"line\">4 permalink: :year/:month/:day/:title/    # 文章的永久链接格式   :year/:month/:day/:title/</div><div class=\"line\">5 permalink_defaults:                     # 永久链接中各部分的默认值</div></pre></td></tr></table></figure>\n<p><em>注意！ 如果你的网站存放在子目录中，例如 <a href=\"http://xiaoxuetu.github.io/blog\" target=\"_blank\" rel=\"external\">http://xiaoxuetu.github.io/blog</a>, 则将url设为<a href=\"http://xiaoxuetu.github.io/blog，\" target=\"_blank\" rel=\"external\">http://xiaoxuetu.github.io/blog，</a> 并且把 root 设为/blog/。</em></p>\n<h5 id=\"1-3-目录配置\"><a href=\"#1-3-目录配置\" class=\"headerlink\" title=\"1.3 目录配置\"></a>1.3 目录配置</h5><p>一般直接取默认值不用修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Directory</div><div class=\"line\">2 source_dir: source         # 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文</div><div class=\"line\">3 public_dir: public         # 公共文件夹，这个文件夹用于存放生成的静态博客文件。</div><div class=\"line\">4 tag_dir: tags              # 标签文件夹</div><div class=\"line\">5 archive_dir: archives      # 归档文件夹</div><div class=\"line\">6 category_dir: categories   # 分类文件夹</div><div class=\"line\">7 code_dir: downloads/code   # Include code 文件夹</div><div class=\"line\">8 i18n_dir: :lang            # 国际化（i18n）文件夹</div><div class=\"line\">9 skip_render:               # 跳过指定文件的渲染，您可使用 glob 来配置路径。</div></pre></td></tr></table></figure>\n<h5 id=\"1-4-文章配置\"><a href=\"#1-4-文章配置\" class=\"headerlink\" title=\"1.4 文章配置\"></a>1.4 文章配置</h5><p>一般直接取默认值不用修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Writing</div><div class=\"line\"> 2 new_post_name: :title.md    # 新文章的文件名称</div><div class=\"line\"> 3 default_layout: post        # 预设布局</div><div class=\"line\"> 4 titlecase: false            # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）</div><div class=\"line\"> 5 external_link: true         # 在新标签中打开链接</div><div class=\"line\"> 6 filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变</div><div class=\"line\"> 7 render_drafts: false        # 显示草稿</div><div class=\"line\"> 8 post_asset_folder: false    # 启动 Asset 文件夹</div><div class=\"line\"> 9 relative_link: false        # 把链接改为与根目录的相对位址</div><div class=\"line\">10 future: true                # 显示未来的文章</div><div class=\"line\">11 highlight:                  # 代码块的设置</div><div class=\"line\">12   enable: true              </div><div class=\"line\">13   line_number: true         # 是否显示行号</div><div class=\"line\">14   auto_detect: true         # 是否自动监测</div><div class=\"line\">15   tab_replace:              # 将 tab 替换成其他字符串</div></pre></td></tr></table></figure>\n<h5 id=\"1-5-分类和标签配置\"><a href=\"#1-5-分类和标签配置\" class=\"headerlink\" title=\"1.5 分类和标签配置\"></a>1.5 分类和标签配置</h5><p>一般直接取默认值不用修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Category &amp; Tag</div><div class=\"line\">2 default_category: uncategorized    # 默认分类, uncategorized表示未分类</div><div class=\"line\">3 category_map:                      # 分类别名</div><div class=\"line\">4 tag_map:                           # 标签别名</div></pre></td></tr></table></figure>\n<h5 id=\"1-6-日期-以及-时间格式-配置\"><a href=\"#1-6-日期-以及-时间格式-配置\" class=\"headerlink\" title=\"1.6 日期 以及 时间格式 配置\"></a>1.6 日期 以及 时间格式 配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 date_format: YYYY-MM-DD           # 日期格式</div><div class=\"line\">2 time_format: HH:mm:ss             # 时间格式</div></pre></td></tr></table></figure>\n<h5 id=\"1-7-分页配置\"><a href=\"#1-7-分页配置\" class=\"headerlink\" title=\"1.7 分页配置\"></a>1.7 分页配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Pagination</div><div class=\"line\">2 per_page: 10                      # 每页显示的文章量，如果设置值为0，则表示禁止分野</div><div class=\"line\">3 pagination_dir: page              # 分页目录</div></pre></td></tr></table></figure>\n<h5 id=\"1-8-主题配置\"><a href=\"#1-8-主题配置\" class=\"headerlink\" title=\"1.8 主题配置\"></a>1.8 主题配置</h5><p>从这里开始，都是属于Hexo拓展插件的配置了。以下代码，主要是主题配置。更详细的主题替换，看第二节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Extensions</div><div class=\"line\">2 theme: landscape    # 主题设置，默认是 landscape</div></pre></td></tr></table></figure>\n<h5 id=\"1-9-部署配置\"><a href=\"#1-9-部署配置\" class=\"headerlink\" title=\"1.9 部署配置\"></a>1.9 部署配置</h5><p>这里主要用于将博客部署到github上，详细教程在后面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Deployment</div><div class=\"line\">2 deploy:</div><div class=\"line\">3   type:     # 设置发布类型，如git，rsync</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h4><p>Hexo为我们提供了很多的主题供我们选择，网页在<a href=\"http://hexo.io/themes/\" target=\"_blank\" rel=\"external\">这里</a> 我们可以自由选择自己喜欢的主题来进行设置。</p>\n<p><a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">github主题列表地址</a></p>\n<p>修改方法，就是将相应的主题clone到博客文件夹下的themes文件夹下，然后将上面1.8中的主题名字设置为相应的修改的名字。<br>我用的是这个：<a href=\"https://github.com/ppoffice/hexo-theme-hueman\" target=\"_blank\" rel=\"external\">hexo-theme-hueman</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: hexo-theme-hueman</div></pre></td></tr></table></figure>\n<p>想要看到修改后的效果，可以在终端中继续执行以下命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean    </div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>以上命令完成后，可以执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<blockquote>\n<p>hexo s 等同于 hexo server , s 其实就是 server的缩写</p>\n</blockquote>\n<p>执行成功后，控制台将会输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>\n<p>用浏览器打开此站点，就可以看到我们用Hexo生成的网页。</p>\n<h5 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h5><p>cd到博客文件的根目录下，使用以下命令，新建博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>\n<p>格式是： hexo new ｛文章名｝<br>命令执行成功后，你就会发现在 source/_posts 目录下多了一个文件 title.md 。</p>\n<p>在文件夹下使用之前我们下载的markdown编辑器，打开这个文件，会看到以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: title</div><div class=\"line\">date: </div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>含义是：</p>\n<ul>\n<li>title : 文章的标题</li>\n<li>date : 该文章的创建时间</li>\n<li>tags : 该文章的标记tag</li>\n</ul>\n<p>依据不同的主题，多标签的语法格式为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags: </div><div class=\"line\">    - 标签1</div><div class=\"line\">    - 标签2</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags: [标签1,标签2]</div></pre></td></tr></table></figure>\n<p>你可以添加你所需要的变量，如果觉得每次生成后更改很麻烦，可以在模板文件夹scaffolds下找到post.md文件，编辑它的Front-matter为你想要的变量参数，默认新建博文使用的post模板。</p>\n<h5 id=\"创建自己制定模板\"><a href=\"#创建自己制定模板\" class=\"headerlink\" title=\"创建自己制定模板\"></a>创建自己制定模板</h5><p>如果你想使用其他模板，你可以使用下列命令来创建指定模板的博文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new scaffold &quot;title&quot;</div></pre></td></tr></table></figure>\n<p>请确保使用的模板scaffold在scaffolds存在。</p>\n<h5 id=\"文章摘要\"><a href=\"#文章摘要\" class=\"headerlink\" title=\"文章摘要\"></a>文章摘要</h5><p>这个功能很实用，可以让你在首页文章目录不必显示全部的文章内容，只显示指定摘要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是全文</div></pre></td></tr></table></figure>\n<hr>\n<p>使用markdown编辑好博文后，就可以执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>此命令主要用于部署网页的静态文件，每次修改后都应该首先执行此命令，来重新部署</p>\n<p>然后继续执行“hexo s”启动服务。</p>\n<p>至此，Hexo的网页部署全部完成，之后就是部署到github上了。</p>\n<hr>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><h5 id=\"1-注册账号\"><a href=\"#1-注册账号\" class=\"headerlink\" title=\"1.注册账号\"></a>1.注册账号</h5><p>如果有github账号的，可以忽略，没有请移步<a href=\"www.github.com\">github</a>注册账号</p>\n<h5 id=\"2-创建与你的github用户名对应的仓库\"><a href=\"#2-创建与你的github用户名对应的仓库\" class=\"headerlink\" title=\"2.创建与你的github用户名对应的仓库\"></a>2.创建与你的github用户名对应的仓库</h5><p>仓库名字必须为“username.github.io”， 其中“username”为你的用户名</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.38.37.png\" alt=\"\"></p>\n<p>点击右上角的加号，创建new repository，然后输入“username.github.io”，点击创建。</p>\n<h5 id=\"3-创建Github-Pages\"><a href=\"#3-创建Github-Pages\" class=\"headerlink\" title=\"3.创建Github Pages\"></a>3.创建Github Pages</h5><p>repository创建完成后进入以下界面</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.43.20.png\" alt=\"\"></p>\n<p>点击最右边的Settings</p>\n<p>进入后找到创建Github Pages的地方</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.45.28.png\" alt=\"\"></p>\n<p>点击 Launch automatic page generator<br>最后生成主页：</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/github_pages_themes.png\" alt=\"\"></p>\n<p>之后我们就可以直接访问“username.github.io”，去访问我们的博客了。</p>\n<h5 id=\"4-配置git\"><a href=\"#4-配置git\" class=\"headerlink\" title=\"4.配置git\"></a>4.配置git</h5><p>由于mac自带git，所以直接打开终端进行设置</p>\n<p>设置用户名密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.email &quot;你的github邮箱&quot;</div><div class=\"line\">git config --global user.name &quot;你的github用户名&quot;</div></pre></td></tr></table></figure>\n<p>生成密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</div></pre></td></tr></table></figure>\n<p>回车之后，打开Finder,前往文件夹[~/.ssh]中会看到生成的两个文件</p>\n<blockquote>\n<p>id_rsa    id_rsa.pub</p>\n</blockquote>\n<p>其中id_rsa是私钥，id_rsa.pub是龚玥</p>\n<p>然后执行以下命令，添加生成的key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add id_rsa</div></pre></td></tr></table></figure>\n<p>然后将id_rsa.pub中的内容复制下来，在我们github的主页中，点击个人的账户，找到settings–&gt;SSH keys，将我们复制的内容，添加在这里。title随便取个名字就好。</p>\n<p>添加成功之后，可以在终端测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>点击回车后输出内容中，最后一句话为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">You&apos;ve successfully authenticated, but github does not provide shell access.</div></pre></td></tr></table></figure>\n<p>至此，验证成功。</p>\n<h5 id=\"5-最后一步，将我们用Hexo生成的网页部署到github\"><a href=\"#5-最后一步，将我们用Hexo生成的网页部署到github\" class=\"headerlink\" title=\"5.最后一步，将我们用Hexo生成的网页部署到github\"></a>5.最后一步，将我们用Hexo生成的网页部署到github</h5><p>在我们的博客根目录下，打开站点配置文件<strong>_config.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy: </div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/username/username.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>其中“username”为你github的用户名。</p>\n<p>修改完保存后，就可以打开终端，cd到博客根目录，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate #生成静态网页</div><div class=\"line\">hexo deploy #部署到github</div></pre></td></tr></table></figure>\n<p>之后输出以下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO Deploy done: git</div></pre></td></tr></table></figure>\n<p>说明我们的博客已经部署成功，github pages可能会存在延时，过几分钟后，就可以通过username.github.io去访问我们的博客了！</p>\n<hr>\n<p><em>本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步第三篇吧</em></p>\n","site":{"data":{}},"more":"<p>上篇讲到Hexo的安装，本篇继续，先来说说Hexo安装后的文件结构与功能。</p>\n<h2 id=\"HEXO博客配置\"><a href=\"#HEXO博客配置\" class=\"headerlink\" title=\"HEXO博客配置\"></a>HEXO博客配置</h2><h4 id=\"1-Hexo设置\"><a href=\"#1-Hexo设置\" class=\"headerlink\" title=\"1. Hexo设置\"></a>1. Hexo设置</h4><p>打开根目录下的_config.yml文件</p>\n<h5 id=\"1-1-站点配置\"><a href=\"#1-1-站点配置\" class=\"headerlink\" title=\"1.1 站点配置\"></a>1.1 站点配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Site</div><div class=\"line\">2 title: myblog   # 网站标题</div><div class=\"line\">3 subtitle:      # 网站子标题</div><div class=\"line\">4 description: 这是一个利用Hexo搭建的博客    # 网站描述</div><div class=\"line\">5 author:  author   # 网站作者，也就是您的名字</div><div class=\"line\">6 language: zh-cn   # 网站使用的语言        </div><div class=\"line\">7 timezone:         # 网站时区。Hexo 预设使用您电脑的时区。</div></pre></td></tr></table></figure>\n<h5 id=\"1-2-网址配置\"><a href=\"#1-2-网址配置\" class=\"headerlink\" title=\"1.2 网址配置\"></a>1.2 网址配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # URL</div><div class=\"line\">2 url: http://xiaoxuetu.github.io         # 博客网址</div><div class=\"line\">3 root: /                                 # 网站根目录</div><div class=\"line\">4 permalink: :year/:month/:day/:title/    # 文章的永久链接格式   :year/:month/:day/:title/</div><div class=\"line\">5 permalink_defaults:                     # 永久链接中各部分的默认值</div></pre></td></tr></table></figure>\n<p><em>注意！ 如果你的网站存放在子目录中，例如 <a href=\"http://xiaoxuetu.github.io/blog\" target=\"_blank\" rel=\"external\">http://xiaoxuetu.github.io/blog</a>, 则将url设为<a href=\"http://xiaoxuetu.github.io/blog，\" target=\"_blank\" rel=\"external\">http://xiaoxuetu.github.io/blog，</a> 并且把 root 设为/blog/。</em></p>\n<h5 id=\"1-3-目录配置\"><a href=\"#1-3-目录配置\" class=\"headerlink\" title=\"1.3 目录配置\"></a>1.3 目录配置</h5><p>一般直接取默认值不用修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Directory</div><div class=\"line\">2 source_dir: source         # 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文</div><div class=\"line\">3 public_dir: public         # 公共文件夹，这个文件夹用于存放生成的静态博客文件。</div><div class=\"line\">4 tag_dir: tags              # 标签文件夹</div><div class=\"line\">5 archive_dir: archives      # 归档文件夹</div><div class=\"line\">6 category_dir: categories   # 分类文件夹</div><div class=\"line\">7 code_dir: downloads/code   # Include code 文件夹</div><div class=\"line\">8 i18n_dir: :lang            # 国际化（i18n）文件夹</div><div class=\"line\">9 skip_render:               # 跳过指定文件的渲染，您可使用 glob 来配置路径。</div></pre></td></tr></table></figure>\n<h5 id=\"1-4-文章配置\"><a href=\"#1-4-文章配置\" class=\"headerlink\" title=\"1.4 文章配置\"></a>1.4 文章配置</h5><p>一般直接取默认值不用修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Writing</div><div class=\"line\"> 2 new_post_name: :title.md    # 新文章的文件名称</div><div class=\"line\"> 3 default_layout: post        # 预设布局</div><div class=\"line\"> 4 titlecase: false            # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）</div><div class=\"line\"> 5 external_link: true         # 在新标签中打开链接</div><div class=\"line\"> 6 filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变</div><div class=\"line\"> 7 render_drafts: false        # 显示草稿</div><div class=\"line\"> 8 post_asset_folder: false    # 启动 Asset 文件夹</div><div class=\"line\"> 9 relative_link: false        # 把链接改为与根目录的相对位址</div><div class=\"line\">10 future: true                # 显示未来的文章</div><div class=\"line\">11 highlight:                  # 代码块的设置</div><div class=\"line\">12   enable: true              </div><div class=\"line\">13   line_number: true         # 是否显示行号</div><div class=\"line\">14   auto_detect: true         # 是否自动监测</div><div class=\"line\">15   tab_replace:              # 将 tab 替换成其他字符串</div></pre></td></tr></table></figure>\n<h5 id=\"1-5-分类和标签配置\"><a href=\"#1-5-分类和标签配置\" class=\"headerlink\" title=\"1.5 分类和标签配置\"></a>1.5 分类和标签配置</h5><p>一般直接取默认值不用修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Category &amp; Tag</div><div class=\"line\">2 default_category: uncategorized    # 默认分类, uncategorized表示未分类</div><div class=\"line\">3 category_map:                      # 分类别名</div><div class=\"line\">4 tag_map:                           # 标签别名</div></pre></td></tr></table></figure>\n<h5 id=\"1-6-日期-以及-时间格式-配置\"><a href=\"#1-6-日期-以及-时间格式-配置\" class=\"headerlink\" title=\"1.6 日期 以及 时间格式 配置\"></a>1.6 日期 以及 时间格式 配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 date_format: YYYY-MM-DD           # 日期格式</div><div class=\"line\">2 time_format: HH:mm:ss             # 时间格式</div></pre></td></tr></table></figure>\n<h5 id=\"1-7-分页配置\"><a href=\"#1-7-分页配置\" class=\"headerlink\" title=\"1.7 分页配置\"></a>1.7 分页配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Pagination</div><div class=\"line\">2 per_page: 10                      # 每页显示的文章量，如果设置值为0，则表示禁止分野</div><div class=\"line\">3 pagination_dir: page              # 分页目录</div></pre></td></tr></table></figure>\n<h5 id=\"1-8-主题配置\"><a href=\"#1-8-主题配置\" class=\"headerlink\" title=\"1.8 主题配置\"></a>1.8 主题配置</h5><p>从这里开始，都是属于Hexo拓展插件的配置了。以下代码，主要是主题配置。更详细的主题替换，看第二节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Extensions</div><div class=\"line\">2 theme: landscape    # 主题设置，默认是 landscape</div></pre></td></tr></table></figure>\n<h5 id=\"1-9-部署配置\"><a href=\"#1-9-部署配置\" class=\"headerlink\" title=\"1.9 部署配置\"></a>1.9 部署配置</h5><p>这里主要用于将博客部署到github上，详细教程在后面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 # Deployment</div><div class=\"line\">2 deploy:</div><div class=\"line\">3   type:     # 设置发布类型，如git，rsync</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h4><p>Hexo为我们提供了很多的主题供我们选择，网页在<a href=\"http://hexo.io/themes/\" target=\"_blank\" rel=\"external\">这里</a> 我们可以自由选择自己喜欢的主题来进行设置。</p>\n<p><a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">github主题列表地址</a></p>\n<p>修改方法，就是将相应的主题clone到博客文件夹下的themes文件夹下，然后将上面1.8中的主题名字设置为相应的修改的名字。<br>我用的是这个：<a href=\"https://github.com/ppoffice/hexo-theme-hueman\" target=\"_blank\" rel=\"external\">hexo-theme-hueman</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: hexo-theme-hueman</div></pre></td></tr></table></figure>\n<p>想要看到修改后的效果，可以在终端中继续执行以下命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean    </div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>以上命令完成后，可以执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<blockquote>\n<p>hexo s 等同于 hexo server , s 其实就是 server的缩写</p>\n</blockquote>\n<p>执行成功后，控制台将会输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>\n<p>用浏览器打开此站点，就可以看到我们用Hexo生成的网页。</p>\n<h5 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h5><p>cd到博客文件的根目录下，使用以下命令，新建博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>\n<p>格式是： hexo new ｛文章名｝<br>命令执行成功后，你就会发现在 source/_posts 目录下多了一个文件 title.md 。</p>\n<p>在文件夹下使用之前我们下载的markdown编辑器，打开这个文件，会看到以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: title</div><div class=\"line\">date: </div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>含义是：</p>\n<ul>\n<li>title : 文章的标题</li>\n<li>date : 该文章的创建时间</li>\n<li>tags : 该文章的标记tag</li>\n</ul>\n<p>依据不同的主题，多标签的语法格式为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags: </div><div class=\"line\">    - 标签1</div><div class=\"line\">    - 标签2</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags: [标签1,标签2]</div></pre></td></tr></table></figure>\n<p>你可以添加你所需要的变量，如果觉得每次生成后更改很麻烦，可以在模板文件夹scaffolds下找到post.md文件，编辑它的Front-matter为你想要的变量参数，默认新建博文使用的post模板。</p>\n<h5 id=\"创建自己制定模板\"><a href=\"#创建自己制定模板\" class=\"headerlink\" title=\"创建自己制定模板\"></a>创建自己制定模板</h5><p>如果你想使用其他模板，你可以使用下列命令来创建指定模板的博文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new scaffold &quot;title&quot;</div></pre></td></tr></table></figure>\n<p>请确保使用的模板scaffold在scaffolds存在。</p>\n<h5 id=\"文章摘要\"><a href=\"#文章摘要\" class=\"headerlink\" title=\"文章摘要\"></a>文章摘要</h5><p>这个功能很实用，可以让你在首页文章目录不必显示全部的文章内容，只显示指定摘要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是全文</div></pre></td></tr></table></figure>\n<hr>\n<p>使用markdown编辑好博文后，就可以执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>此命令主要用于部署网页的静态文件，每次修改后都应该首先执行此命令，来重新部署</p>\n<p>然后继续执行“hexo s”启动服务。</p>\n<p>至此，Hexo的网页部署全部完成，之后就是部署到github上了。</p>\n<hr>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><h5 id=\"1-注册账号\"><a href=\"#1-注册账号\" class=\"headerlink\" title=\"1.注册账号\"></a>1.注册账号</h5><p>如果有github账号的，可以忽略，没有请移步<a href=\"www.github.com\">github</a>注册账号</p>\n<h5 id=\"2-创建与你的github用户名对应的仓库\"><a href=\"#2-创建与你的github用户名对应的仓库\" class=\"headerlink\" title=\"2.创建与你的github用户名对应的仓库\"></a>2.创建与你的github用户名对应的仓库</h5><p>仓库名字必须为“username.github.io”， 其中“username”为你的用户名</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.38.37.png\" alt=\"\"></p>\n<p>点击右上角的加号，创建new repository，然后输入“username.github.io”，点击创建。</p>\n<h5 id=\"3-创建Github-Pages\"><a href=\"#3-创建Github-Pages\" class=\"headerlink\" title=\"3.创建Github Pages\"></a>3.创建Github Pages</h5><p>repository创建完成后进入以下界面</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.43.20.png\" alt=\"\"></p>\n<p>点击最右边的Settings</p>\n<p>进入后找到创建Github Pages的地方</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.45.28.png\" alt=\"\"></p>\n<p>点击 Launch automatic page generator<br>最后生成主页：</p>\n<p><img src=\"http://7xr7f9.com1.z0.glb.clouddn.com/github_pages_themes.png\" alt=\"\"></p>\n<p>之后我们就可以直接访问“username.github.io”，去访问我们的博客了。</p>\n<h5 id=\"4-配置git\"><a href=\"#4-配置git\" class=\"headerlink\" title=\"4.配置git\"></a>4.配置git</h5><p>由于mac自带git，所以直接打开终端进行设置</p>\n<p>设置用户名密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.email &quot;你的github邮箱&quot;</div><div class=\"line\">git config --global user.name &quot;你的github用户名&quot;</div></pre></td></tr></table></figure>\n<p>生成密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</div></pre></td></tr></table></figure>\n<p>回车之后，打开Finder,前往文件夹[~/.ssh]中会看到生成的两个文件</p>\n<blockquote>\n<p>id_rsa    id_rsa.pub</p>\n</blockquote>\n<p>其中id_rsa是私钥，id_rsa.pub是龚玥</p>\n<p>然后执行以下命令，添加生成的key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add id_rsa</div></pre></td></tr></table></figure>\n<p>然后将id_rsa.pub中的内容复制下来，在我们github的主页中，点击个人的账户，找到settings–&gt;SSH keys，将我们复制的内容，添加在这里。title随便取个名字就好。</p>\n<p>添加成功之后，可以在终端测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>点击回车后输出内容中，最后一句话为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">You&apos;ve successfully authenticated, but github does not provide shell access.</div></pre></td></tr></table></figure>\n<p>至此，验证成功。</p>\n<h5 id=\"5-最后一步，将我们用Hexo生成的网页部署到github\"><a href=\"#5-最后一步，将我们用Hexo生成的网页部署到github\" class=\"headerlink\" title=\"5.最后一步，将我们用Hexo生成的网页部署到github\"></a>5.最后一步，将我们用Hexo生成的网页部署到github</h5><p>在我们的博客根目录下，打开站点配置文件<strong>_config.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy: </div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/username/username.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>其中“username”为你github的用户名。</p>\n<p>修改完保存后，就可以打开终端，cd到博客根目录，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate #生成静态网页</div><div class=\"line\">hexo deploy #部署到github</div></pre></td></tr></table></figure>\n<p>之后输出以下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO Deploy done: git</div></pre></td></tr></table></figure>\n<p>说明我们的博客已经部署成功，github pages可能会存在延时，过几分钟后，就可以通过username.github.io去访问我们的博客了！</p>\n<hr>\n<p><em>本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步第三篇吧</em></p>\n"},{"layout":"post","title":"浅析OC中drawRect","date":"2014-08-21T08:33:51.000Z","comments":1,"_content":"\n#### 废话不多说，直接上代码\n- 在View中重写- （void）drawRect：（CGRect）rect这个方法\n\n```\n@interface DrawView(){\n\t    UIImage *image1;\n\t    UIImage* image2;\n\t}\n\t@end\n－ (instancetype)initWithFrame:(CGRect)frame\n\t{\n\t    self = [super initWithFrame:frame];\n\t    if (self) {\n\t         image1 = [UIImage imageNamed:@\"image.png\"];\n\t         image2 = [UIImage imageNamed:@\"BGG.png\"];\n\t    }\n\t    return self;\n\t}\n－ (void)drawRect:(CGRect)rect\n\t{\n\t//    [self drawText];\n\t//    [self drawLine];\n\t//    [self draeRectangle:CGRectMake(10, 100, 50, 50)];\n\t//    [self drawImage];\n\t//    [self animationImage];\n\t}\n```\n\n####  1.先从简单的画线开始\n\n```\n－(void)drawLine\n\t{\n\tCGContextRef context    =UIGraphicsGetCurrentContext();//获取画布\n\tCGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);//线条颜色\n\tCGContextSetShouldAntialias(context,NO);//设置线条平滑，不需要两边像素宽\n\tCGContextSetLineWidth(context,1.0f);//设置线条宽度\n\tCGContextMoveToPoint(context,153,10); //线条起始点\n\tCGContextAddLineToPoint(context,253,10);//线条结束点\n\tCGContextStrokePath(context);//结束，也就是开始画\n\t}\n\t\n```\n\n####  2.绘制文本\n\n```\n－(void)drawText\n\t{\n\t    UIColor *color =[UIColor colorWithRed:0.5f\n\t                                           green:0.0f\n\t                                            blue:0.5f\n\t                                           alpha:1.0f];\n\t    [color set];\n\t    UIFont *withFont:helvetica = [UIFont fontWithName:@\"HelveticaNeue-Bold\"size:30.0f];\n\t    NSString *string =@\"李先森\";\n\t    [string drawAtPoint:CGPointMake(25,190)withFont:helvetica];\n\t}\n```\n\n#### 3.绘制矩形：这里有分为两种风格{1.无框矩形2.有框矩形}\n\n```\n－ (void)draeRectangle:(CGRect)rect{\n    //首先，获取上下文\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    /*\n     //画无框矩形\n    //设置矩形填充颜色：红色\n    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);\n    //填充矩形\n    CGContextFillRect(context, rect);\n    //执行绘画\n    CGContextStrokePath(context);\n    */\n    \n    //画有框矩形\n    //设置矩形填充颜色：红色\n    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);\n    //填充矩形\n    CGContextFillRect(context, rect);\n    //设置画笔颜色：黑色\n    CGContextSetStrokeColorWithColor(context, BLUECOLOR.CGColor);\n    //设置画笔线条粗细\n    CGContextSetLineWidth(context, 3.0);\n    //画矩形边框\n    CGContextAddRect(context,rect);\n    //执行绘画  \n    CGContextStrokePath(context);\n\t}\n```\n\n#### 4.绘制图片\n\n```\n－(void)drawImage{\n\t    CGContextRef context    =UIGraphicsGetCurrentContext();//获取画布\n\t    \n\t//    CGContextDrawImage(context,CGRectMake(160,0,160, 150), [image1 CGImage]);\n\t//上面这种方式，绘制出来的图片是翻转的，开始不知道。因为测试的图片都比较对称。后发发现是上下颠倒了\n\t\n\t    //下面才是正确的方法。\n\t    UIGraphicsPushContext( context );\n\t//    [image1 drawInRect:CGRectMake(160, 0, 160, 150)];\n\t    [image1 drawInRect:CGRectMake(160, 0, 160, 150) blendMode:kCGBlendModeColor alpha:1];\n\t\n\t    UIGraphicsPopContext();\n\t}\n```\n#### 5.给图片添加动画\n\n```\n－ (void)animationImage{\n\t    UIImageView *imageView = [[UIImageView alloc]initWithImage:image2];\n\t    imageView.frame =CGRectMake(100,100,100,100);\n\t    imageView.layer.cornerRadius = 50;\n\t    imageView.layer.masksToBounds = YES;\n\t    [self addSubview:imageView];\n\t    imageView.userInteractionEnabled =YES;\n\t    UITapGestureRecognizer* singleTap =\n\t    [[UITapGestureRecognizer  alloc]initWithTarget:self action:@selector(onImageClick)];\n\t    [imageView addGestureRecognizer:singleTap];\n\t    \n\t    //animation\n\t    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@\"transform\"];\n\t    animation.delegate =self;\n\t    animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI ,0, 0,1.0)];\n\t    animation.duration =1;\n\t    animation.cumulative =YES;\n\t    animation.repeatCount =INT_MAX;\n\t    \n\t    [imageView.layer addAnimation:animation forKey:@\"animation\"];\n\t}\n```\n\n```\n\t- (void)onImageClick\n\t{\n\t// someing code   \n\t}\n```\n\n\n","source":"_posts/浅析OC中drawRect.md","raw":"---\nlayout : post\ntitle: 浅析OC中drawRect\ndate: 2014-08-21 16:33:51\ntags: Blog\ncomments: true\n---\n\n#### 废话不多说，直接上代码\n- 在View中重写- （void）drawRect：（CGRect）rect这个方法\n\n```\n@interface DrawView(){\n\t    UIImage *image1;\n\t    UIImage* image2;\n\t}\n\t@end\n－ (instancetype)initWithFrame:(CGRect)frame\n\t{\n\t    self = [super initWithFrame:frame];\n\t    if (self) {\n\t         image1 = [UIImage imageNamed:@\"image.png\"];\n\t         image2 = [UIImage imageNamed:@\"BGG.png\"];\n\t    }\n\t    return self;\n\t}\n－ (void)drawRect:(CGRect)rect\n\t{\n\t//    [self drawText];\n\t//    [self drawLine];\n\t//    [self draeRectangle:CGRectMake(10, 100, 50, 50)];\n\t//    [self drawImage];\n\t//    [self animationImage];\n\t}\n```\n\n####  1.先从简单的画线开始\n\n```\n－(void)drawLine\n\t{\n\tCGContextRef context    =UIGraphicsGetCurrentContext();//获取画布\n\tCGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);//线条颜色\n\tCGContextSetShouldAntialias(context,NO);//设置线条平滑，不需要两边像素宽\n\tCGContextSetLineWidth(context,1.0f);//设置线条宽度\n\tCGContextMoveToPoint(context,153,10); //线条起始点\n\tCGContextAddLineToPoint(context,253,10);//线条结束点\n\tCGContextStrokePath(context);//结束，也就是开始画\n\t}\n\t\n```\n\n####  2.绘制文本\n\n```\n－(void)drawText\n\t{\n\t    UIColor *color =[UIColor colorWithRed:0.5f\n\t                                           green:0.0f\n\t                                            blue:0.5f\n\t                                           alpha:1.0f];\n\t    [color set];\n\t    UIFont *withFont:helvetica = [UIFont fontWithName:@\"HelveticaNeue-Bold\"size:30.0f];\n\t    NSString *string =@\"李先森\";\n\t    [string drawAtPoint:CGPointMake(25,190)withFont:helvetica];\n\t}\n```\n\n#### 3.绘制矩形：这里有分为两种风格{1.无框矩形2.有框矩形}\n\n```\n－ (void)draeRectangle:(CGRect)rect{\n    //首先，获取上下文\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    /*\n     //画无框矩形\n    //设置矩形填充颜色：红色\n    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);\n    //填充矩形\n    CGContextFillRect(context, rect);\n    //执行绘画\n    CGContextStrokePath(context);\n    */\n    \n    //画有框矩形\n    //设置矩形填充颜色：红色\n    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);\n    //填充矩形\n    CGContextFillRect(context, rect);\n    //设置画笔颜色：黑色\n    CGContextSetStrokeColorWithColor(context, BLUECOLOR.CGColor);\n    //设置画笔线条粗细\n    CGContextSetLineWidth(context, 3.0);\n    //画矩形边框\n    CGContextAddRect(context,rect);\n    //执行绘画  \n    CGContextStrokePath(context);\n\t}\n```\n\n#### 4.绘制图片\n\n```\n－(void)drawImage{\n\t    CGContextRef context    =UIGraphicsGetCurrentContext();//获取画布\n\t    \n\t//    CGContextDrawImage(context,CGRectMake(160,0,160, 150), [image1 CGImage]);\n\t//上面这种方式，绘制出来的图片是翻转的，开始不知道。因为测试的图片都比较对称。后发发现是上下颠倒了\n\t\n\t    //下面才是正确的方法。\n\t    UIGraphicsPushContext( context );\n\t//    [image1 drawInRect:CGRectMake(160, 0, 160, 150)];\n\t    [image1 drawInRect:CGRectMake(160, 0, 160, 150) blendMode:kCGBlendModeColor alpha:1];\n\t\n\t    UIGraphicsPopContext();\n\t}\n```\n#### 5.给图片添加动画\n\n```\n－ (void)animationImage{\n\t    UIImageView *imageView = [[UIImageView alloc]initWithImage:image2];\n\t    imageView.frame =CGRectMake(100,100,100,100);\n\t    imageView.layer.cornerRadius = 50;\n\t    imageView.layer.masksToBounds = YES;\n\t    [self addSubview:imageView];\n\t    imageView.userInteractionEnabled =YES;\n\t    UITapGestureRecognizer* singleTap =\n\t    [[UITapGestureRecognizer  alloc]initWithTarget:self action:@selector(onImageClick)];\n\t    [imageView addGestureRecognizer:singleTap];\n\t    \n\t    //animation\n\t    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@\"transform\"];\n\t    animation.delegate =self;\n\t    animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI ,0, 0,1.0)];\n\t    animation.duration =1;\n\t    animation.cumulative =YES;\n\t    animation.repeatCount =INT_MAX;\n\t    \n\t    [imageView.layer addAnimation:animation forKey:@\"animation\"];\n\t}\n```\n\n```\n\t- (void)onImageClick\n\t{\n\t// someing code   \n\t}\n```\n\n\n","slug":"浅析OC中drawRect","published":1,"updated":"2017-05-16T09:55:08.000Z","photos":[],"link":"","_id":"cj2rdwd1k00080io60l4oxhw5","content":"<h4 id=\"废话不多说，直接上代码\"><a href=\"#废话不多说，直接上代码\" class=\"headerlink\" title=\"废话不多说，直接上代码\"></a>废话不多说，直接上代码</h4><ul>\n<li>在View中重写- （void）drawRect：（CGRect）rect这个方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface DrawView()&#123;</div><div class=\"line\">\t    UIImage *image1;</div><div class=\"line\">\t    UIImage* image2;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t@end</div><div class=\"line\">－ (instancetype)initWithFrame:(CGRect)frame</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    self = [super initWithFrame:frame];</div><div class=\"line\">\t    if (self) &#123;</div><div class=\"line\">\t         image1 = [UIImage imageNamed:@&quot;image.png&quot;];</div><div class=\"line\">\t         image2 = [UIImage imageNamed:@&quot;BGG.png&quot;];</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    return self;</div><div class=\"line\">\t&#125;</div><div class=\"line\">－ (void)drawRect:(CGRect)rect</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t//    [self drawText];</div><div class=\"line\">\t//    [self drawLine];</div><div class=\"line\">\t//    [self draeRectangle:CGRectMake(10, 100, 50, 50)];</div><div class=\"line\">\t//    [self drawImage];</div><div class=\"line\">\t//    [self animationImage];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1-先从简单的画线开始\"><a href=\"#1-先从简单的画线开始\" class=\"headerlink\" title=\"1.先从简单的画线开始\"></a>1.先从简单的画线开始</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">－(void)drawLine</div><div class=\"line\">\t&#123;</div><div class=\"line\">\tCGContextRef context    =UIGraphicsGetCurrentContext();//获取画布</div><div class=\"line\">\tCGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);//线条颜色</div><div class=\"line\">\tCGContextSetShouldAntialias(context,NO);//设置线条平滑，不需要两边像素宽</div><div class=\"line\">\tCGContextSetLineWidth(context,1.0f);//设置线条宽度</div><div class=\"line\">\tCGContextMoveToPoint(context,153,10); //线条起始点</div><div class=\"line\">\tCGContextAddLineToPoint(context,253,10);//线条结束点</div><div class=\"line\">\tCGContextStrokePath(context);//结束，也就是开始画</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-绘制文本\"><a href=\"#2-绘制文本\" class=\"headerlink\" title=\"2.绘制文本\"></a>2.绘制文本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">－(void)drawText</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    UIColor *color =[UIColor colorWithRed:0.5f</div><div class=\"line\">\t                                           green:0.0f</div><div class=\"line\">\t                                            blue:0.5f</div><div class=\"line\">\t                                           alpha:1.0f];</div><div class=\"line\">\t    [color set];</div><div class=\"line\">\t    UIFont *withFont:helvetica = [UIFont fontWithName:@&quot;HelveticaNeue-Bold&quot;size:30.0f];</div><div class=\"line\">\t    NSString *string =@&quot;李先森&quot;;</div><div class=\"line\">\t    [string drawAtPoint:CGPointMake(25,190)withFont:helvetica];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-绘制矩形：这里有分为两种风格-1-无框矩形2-有框矩形\"><a href=\"#3-绘制矩形：这里有分为两种风格-1-无框矩形2-有框矩形\" class=\"headerlink\" title=\"3.绘制矩形：这里有分为两种风格{1.无框矩形2.有框矩形}\"></a>3.绘制矩形：这里有分为两种风格{1.无框矩形2.有框矩形}</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">－ (void)draeRectangle:(CGRect)rect&#123;</div><div class=\"line\">    //首先，获取上下文</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    /*</div><div class=\"line\">     //画无框矩形</div><div class=\"line\">    //设置矩形填充颜色：红色</div><div class=\"line\">    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);</div><div class=\"line\">    //填充矩形</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    //执行绘画</div><div class=\"line\">    CGContextStrokePath(context);</div><div class=\"line\">    */</div><div class=\"line\">    </div><div class=\"line\">    //画有框矩形</div><div class=\"line\">    //设置矩形填充颜色：红色</div><div class=\"line\">    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);</div><div class=\"line\">    //填充矩形</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    //设置画笔颜色：黑色</div><div class=\"line\">    CGContextSetStrokeColorWithColor(context, BLUECOLOR.CGColor);</div><div class=\"line\">    //设置画笔线条粗细</div><div class=\"line\">    CGContextSetLineWidth(context, 3.0);</div><div class=\"line\">    //画矩形边框</div><div class=\"line\">    CGContextAddRect(context,rect);</div><div class=\"line\">    //执行绘画  </div><div class=\"line\">    CGContextStrokePath(context);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-绘制图片\"><a href=\"#4-绘制图片\" class=\"headerlink\" title=\"4.绘制图片\"></a>4.绘制图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">－(void)drawImage&#123;</div><div class=\"line\">\t    CGContextRef context    =UIGraphicsGetCurrentContext();//获取画布</div><div class=\"line\">\t    </div><div class=\"line\">\t//    CGContextDrawImage(context,CGRectMake(160,0,160, 150), [image1 CGImage]);</div><div class=\"line\">\t//上面这种方式，绘制出来的图片是翻转的，开始不知道。因为测试的图片都比较对称。后发发现是上下颠倒了</div><div class=\"line\">\t</div><div class=\"line\">\t    //下面才是正确的方法。</div><div class=\"line\">\t    UIGraphicsPushContext( context );</div><div class=\"line\">\t//    [image1 drawInRect:CGRectMake(160, 0, 160, 150)];</div><div class=\"line\">\t    [image1 drawInRect:CGRectMake(160, 0, 160, 150) blendMode:kCGBlendModeColor alpha:1];</div><div class=\"line\">\t</div><div class=\"line\">\t    UIGraphicsPopContext();</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-给图片添加动画\"><a href=\"#5-给图片添加动画\" class=\"headerlink\" title=\"5.给图片添加动画\"></a>5.给图片添加动画</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">－ (void)animationImage&#123;</div><div class=\"line\">\t    UIImageView *imageView = [[UIImageView alloc]initWithImage:image2];</div><div class=\"line\">\t    imageView.frame =CGRectMake(100,100,100,100);</div><div class=\"line\">\t    imageView.layer.cornerRadius = 50;</div><div class=\"line\">\t    imageView.layer.masksToBounds = YES;</div><div class=\"line\">\t    [self addSubview:imageView];</div><div class=\"line\">\t    imageView.userInteractionEnabled =YES;</div><div class=\"line\">\t    UITapGestureRecognizer* singleTap =</div><div class=\"line\">\t    [[UITapGestureRecognizer  alloc]initWithTarget:self action:@selector(onImageClick)];</div><div class=\"line\">\t    [imageView addGestureRecognizer:singleTap];</div><div class=\"line\">\t    </div><div class=\"line\">\t    //animation</div><div class=\"line\">\t    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;transform&quot;];</div><div class=\"line\">\t    animation.delegate =self;</div><div class=\"line\">\t    animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI ,0, 0,1.0)];</div><div class=\"line\">\t    animation.duration =1;</div><div class=\"line\">\t    animation.cumulative =YES;</div><div class=\"line\">\t    animation.repeatCount =INT_MAX;</div><div class=\"line\">\t    </div><div class=\"line\">\t    [imageView.layer addAnimation:animation forKey:@&quot;animation&quot;];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)onImageClick</div><div class=\"line\">&#123;</div><div class=\"line\">// someing code   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"废话不多说，直接上代码\"><a href=\"#废话不多说，直接上代码\" class=\"headerlink\" title=\"废话不多说，直接上代码\"></a>废话不多说，直接上代码</h4><ul>\n<li>在View中重写- （void）drawRect：（CGRect）rect这个方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface DrawView()&#123;</div><div class=\"line\">\t    UIImage *image1;</div><div class=\"line\">\t    UIImage* image2;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t@end</div><div class=\"line\">－ (instancetype)initWithFrame:(CGRect)frame</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    self = [super initWithFrame:frame];</div><div class=\"line\">\t    if (self) &#123;</div><div class=\"line\">\t         image1 = [UIImage imageNamed:@&quot;image.png&quot;];</div><div class=\"line\">\t         image2 = [UIImage imageNamed:@&quot;BGG.png&quot;];</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    return self;</div><div class=\"line\">\t&#125;</div><div class=\"line\">－ (void)drawRect:(CGRect)rect</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t//    [self drawText];</div><div class=\"line\">\t//    [self drawLine];</div><div class=\"line\">\t//    [self draeRectangle:CGRectMake(10, 100, 50, 50)];</div><div class=\"line\">\t//    [self drawImage];</div><div class=\"line\">\t//    [self animationImage];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1-先从简单的画线开始\"><a href=\"#1-先从简单的画线开始\" class=\"headerlink\" title=\"1.先从简单的画线开始\"></a>1.先从简单的画线开始</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">－(void)drawLine</div><div class=\"line\">\t&#123;</div><div class=\"line\">\tCGContextRef context    =UIGraphicsGetCurrentContext();//获取画布</div><div class=\"line\">\tCGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);//线条颜色</div><div class=\"line\">\tCGContextSetShouldAntialias(context,NO);//设置线条平滑，不需要两边像素宽</div><div class=\"line\">\tCGContextSetLineWidth(context,1.0f);//设置线条宽度</div><div class=\"line\">\tCGContextMoveToPoint(context,153,10); //线条起始点</div><div class=\"line\">\tCGContextAddLineToPoint(context,253,10);//线条结束点</div><div class=\"line\">\tCGContextStrokePath(context);//结束，也就是开始画</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-绘制文本\"><a href=\"#2-绘制文本\" class=\"headerlink\" title=\"2.绘制文本\"></a>2.绘制文本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">－(void)drawText</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    UIColor *color =[UIColor colorWithRed:0.5f</div><div class=\"line\">\t                                           green:0.0f</div><div class=\"line\">\t                                            blue:0.5f</div><div class=\"line\">\t                                           alpha:1.0f];</div><div class=\"line\">\t    [color set];</div><div class=\"line\">\t    UIFont *withFont:helvetica = [UIFont fontWithName:@&quot;HelveticaNeue-Bold&quot;size:30.0f];</div><div class=\"line\">\t    NSString *string =@&quot;李先森&quot;;</div><div class=\"line\">\t    [string drawAtPoint:CGPointMake(25,190)withFont:helvetica];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-绘制矩形：这里有分为两种风格-1-无框矩形2-有框矩形\"><a href=\"#3-绘制矩形：这里有分为两种风格-1-无框矩形2-有框矩形\" class=\"headerlink\" title=\"3.绘制矩形：这里有分为两种风格{1.无框矩形2.有框矩形}\"></a>3.绘制矩形：这里有分为两种风格{1.无框矩形2.有框矩形}</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">－ (void)draeRectangle:(CGRect)rect&#123;</div><div class=\"line\">    //首先，获取上下文</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    /*</div><div class=\"line\">     //画无框矩形</div><div class=\"line\">    //设置矩形填充颜色：红色</div><div class=\"line\">    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);</div><div class=\"line\">    //填充矩形</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    //执行绘画</div><div class=\"line\">    CGContextStrokePath(context);</div><div class=\"line\">    */</div><div class=\"line\">    </div><div class=\"line\">    //画有框矩形</div><div class=\"line\">    //设置矩形填充颜色：红色</div><div class=\"line\">    CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0);</div><div class=\"line\">    //填充矩形</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    //设置画笔颜色：黑色</div><div class=\"line\">    CGContextSetStrokeColorWithColor(context, BLUECOLOR.CGColor);</div><div class=\"line\">    //设置画笔线条粗细</div><div class=\"line\">    CGContextSetLineWidth(context, 3.0);</div><div class=\"line\">    //画矩形边框</div><div class=\"line\">    CGContextAddRect(context,rect);</div><div class=\"line\">    //执行绘画  </div><div class=\"line\">    CGContextStrokePath(context);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-绘制图片\"><a href=\"#4-绘制图片\" class=\"headerlink\" title=\"4.绘制图片\"></a>4.绘制图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">－(void)drawImage&#123;</div><div class=\"line\">\t    CGContextRef context    =UIGraphicsGetCurrentContext();//获取画布</div><div class=\"line\">\t    </div><div class=\"line\">\t//    CGContextDrawImage(context,CGRectMake(160,0,160, 150), [image1 CGImage]);</div><div class=\"line\">\t//上面这种方式，绘制出来的图片是翻转的，开始不知道。因为测试的图片都比较对称。后发发现是上下颠倒了</div><div class=\"line\">\t</div><div class=\"line\">\t    //下面才是正确的方法。</div><div class=\"line\">\t    UIGraphicsPushContext( context );</div><div class=\"line\">\t//    [image1 drawInRect:CGRectMake(160, 0, 160, 150)];</div><div class=\"line\">\t    [image1 drawInRect:CGRectMake(160, 0, 160, 150) blendMode:kCGBlendModeColor alpha:1];</div><div class=\"line\">\t</div><div class=\"line\">\t    UIGraphicsPopContext();</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-给图片添加动画\"><a href=\"#5-给图片添加动画\" class=\"headerlink\" title=\"5.给图片添加动画\"></a>5.给图片添加动画</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">－ (void)animationImage&#123;</div><div class=\"line\">\t    UIImageView *imageView = [[UIImageView alloc]initWithImage:image2];</div><div class=\"line\">\t    imageView.frame =CGRectMake(100,100,100,100);</div><div class=\"line\">\t    imageView.layer.cornerRadius = 50;</div><div class=\"line\">\t    imageView.layer.masksToBounds = YES;</div><div class=\"line\">\t    [self addSubview:imageView];</div><div class=\"line\">\t    imageView.userInteractionEnabled =YES;</div><div class=\"line\">\t    UITapGestureRecognizer* singleTap =</div><div class=\"line\">\t    [[UITapGestureRecognizer  alloc]initWithTarget:self action:@selector(onImageClick)];</div><div class=\"line\">\t    [imageView addGestureRecognizer:singleTap];</div><div class=\"line\">\t    </div><div class=\"line\">\t    //animation</div><div class=\"line\">\t    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;transform&quot;];</div><div class=\"line\">\t    animation.delegate =self;</div><div class=\"line\">\t    animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI ,0, 0,1.0)];</div><div class=\"line\">\t    animation.duration =1;</div><div class=\"line\">\t    animation.cumulative =YES;</div><div class=\"line\">\t    animation.repeatCount =INT_MAX;</div><div class=\"line\">\t    </div><div class=\"line\">\t    [imageView.layer addAnimation:animation forKey:@&quot;animation&quot;];</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)onImageClick</div><div class=\"line\">&#123;</div><div class=\"line\">// someing code   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2rdwd1300040io69nprddrp","tag_id":"cj2rdwd0e00020io66hpuh5os","_id":"cj2rdwd1j00070io6vloshzpu"},{"post_id":"cj2rdwczu00000io6y7s2s8lz","tag_id":"cj2rdwd0e00020io66hpuh5os","_id":"cj2rdwd1q00090io61ti8hmax"},{"post_id":"cj2rdwd1700050io6xpwisghu","tag_id":"cj2rdwd0e00020io66hpuh5os","_id":"cj2rdwd22000b0io6q7fzv0om"},{"post_id":"cj2rdwd1k00080io60l4oxhw5","tag_id":"cj2rdwd0e00020io66hpuh5os","_id":"cj2rdwd23000c0io60tx55vsk"},{"post_id":"cj2rdwd0900010io6k3rpyivj","tag_id":"cj2rdwd0e00020io66hpuh5os","_id":"cj2rdwd25000d0io64e18sa58"},{"post_id":"cj2rdwd0t00030io660qvjz3d","tag_id":"cj2rdwd0e00020io66hpuh5os","_id":"cj2rdwd26000e0io6qn2t7at2"}],"Tag":[{"name":"Blog","_id":"cj2rdwd0e00020io66hpuh5os"}]}}